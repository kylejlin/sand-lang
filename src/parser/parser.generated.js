/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,8],$V1=[12,18],$V2=[2,3],$V3=[1,11],$V4=[2,11],$V5=[1,14],$V6=[1,20],$V7=[17,20],$V8=[7,9,14,32],$V9=[2,19],$Va=[1,26],$Vb=[12,17,20,22,27,30],$Vc=[1,34],$Vd=[2,24],$Ve=[1,35],$Vf=[1,60],$Vg=[1,78],$Vh=[1,71],$Vi=[1,72],$Vj=[1,73],$Vk=[1,75],$Vl=[1,76],$Vm=[20,30],$Vn=[7,9,12,14,15,17,20,23,27,30,32,39,43,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60],$Vo=[12,14,20,23,27,30],$Vp=[1,109],$Vq=[1,111],$Vr=[1,114],$Vs=[1,105],$Vt=[1,106],$Vu=[1,107],$Vv=[1,108],$Vw=[1,110],$Vx=[1,112],$Vy=[1,113],$Vz=[1,115],$VA=[1,116],$VB=[1,117],$VC=[1,118],$VD=[12,14,15,17,20,23,27,30,45,46,47,48,49,50,51,52,53,54,55,56],$VE=[12,14,15,17,20,22,23,27,28,30,45,46,47,48,49,50,51,52,53,54,55,56,63],$VF=[14,27],$VG=[9,14,39,57,59,60],$VH=[9,12,14,15,17,20,23,27,30,39,43,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60],$VI=[9,12,14,15,17,20,23,27,30,39,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"classes":3,"pubClass":4,"optPrivClasses":5,"EOF":6,"pub":7,"class":8,"IDENTIFIER":9,"optTypeArgDefs":10,"optExtension":11,"{":12,"classBody":13,"}":14,"<":15,"typeArgDefs":16,">":17,"extends":18,"type":19,",":20,"typeArgs":21,"[":22,"]":23,":":24,"classItem":25,"optAccessModifier":26,";":27,"(":28,"optArgDefs":29,")":30,"compoundExpression":31,"prot":32,"argDefs":33,"expressionLackingRightDelimiter":34,"expressionIncludingRightDelimiter":35,"twoOrMoreExpressionsWhereTheLastLacksRightDelimiter":36,"twoOrMoreExpressionsWhereTheLastIncludesRightDelimiter":37,"expressionLackingRightDelimiterNotStartingWithInfixToken":38,"if":39,"expression":40,"optElseExpression":41,"optElseIfExpression":42,"else":43,"expressionLackingRightDelimiterStartingWithInfixToken":44,"-":45,"||":46,"&&":47,"==":48,"!=":49,"<=":50,">=":51,"+":52,"*":53,"/":54,"%":55,"**":56,"!":57,"functionCall":58,"NUMBER":59,"STRING":60,"assignableExpression":61,"optArgs":62,".":63,"args":64,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"pub",8:"class",9:"IDENTIFIER",12:"{",14:"}",15:"<",17:">",18:"extends",20:",",22:"[",23:"]",24:":",27:";",28:"(",30:")",32:"prot",39:"if",43:"else",45:"-",46:"||",47:"&&",48:"==",49:"!=",50:"<=",51:">=",52:"+",53:"*",54:"/",55:"%",56:"**",57:"!",59:"NUMBER",60:"STRING",63:"."},
productions_: [0,[3,3],[4,8],[10,0],[10,3],[16,1],[16,3],[16,3],[16,5],[5,0],[5,8],[11,0],[11,2],[19,4],[19,1],[19,3],[19,4],[21,1],[21,3],[13,0],[13,2],[25,5],[25,8],[25,6],[26,0],[26,1],[26,1],[29,0],[29,1],[33,3],[33,5],[31,2],[31,3],[31,4],[31,3],[31,3],[31,4],[31,3],[36,3],[36,2],[36,3],[36,2],[37,3],[37,2],[37,3],[37,2],[35,4],[41,1],[41,3],[42,0],[42,5],[34,1],[34,1],[44,2],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,2],[38,1],[38,1],[38,1],[38,1],[58,4],[61,1],[61,3],[61,3],[61,4],[61,4],[40,1],[40,1],[62,0],[62,1],[64,1],[64,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return { type: yy.NodeType.File, pubClass: $$[$0-2], privClasses: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 2:
 this.$ = { type: yy.NodeType.Class, isPub: true, name: $$[$0-5], typeArgDefs: $$[$0-4], superClass: $$[$0-3], items: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 3: case 9: case 19: case 27: case 31: case 49: case 95:
 this.$ = []; 
break;
case 4: case 35: case 37:
 this.$ = $$[$0-1]; 
break;
case 5:
 this.$ = [{ name: $$[$0], constraint: { constraintType: yy.ConstraintType.None }, location: yy.camelCase(this._$) }]; 
break;
case 6:
 this.$ = [{ name: $$[$0-2], constraint: { constraintType: yy.ConstraintType.Extends, superClass: $$[$0] }, location: yy.camelCase(this._$) }]; 
break;
case 7:
 this.$ = $$[$0-2].concat([{ name: $$[$0], constraint: { constraintType: yy.ConstraintType.None }, location: yy.camelCase(_$[$0]) }]); 
break;
case 8:
 this.$ = $$[$0-4].concat([{ name: $$[$0-2], constraint: { constraintType: yy.ConstraintType.Extends, superClass: $$[$0] }, location: yy.camelCase(yy.merge(_$[$0-2], _$[$0])) }]); 
break;
case 10:
 this.$ = $$[$0-7].concat([{ type: yy.NodeType.Class, isPub: false, name: $$[$0-5], typeArgDefs: $$[$0-4], superClass: $$[$0-3], items: $$[$0-1], location: yy.camelCase(yy.merge(_$[$0-6], _$[$0])) }]); 
break;
case 11: case 24:
 this.$ = null; 
break;
case 12:
 this.$ = $$[$0]; 
break;
case 13:
 this.$ = { name: $$[$0-3], args: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 14:
 this.$ = { name: $$[$0], args: [], location: yy.camelCase(this._$) }; 
break;
case 15:
 this.$ = { name: "array", args: [$$[$0-2]], location: yy.camelCase(this._$) }; 
break;
case 16:
 this.$ = { name: "java.util.ArrayList", args: [yy.wrapPrimitiveIfNeeded($$[$0-3])], location: yy.camelCase(this._$) }; 
break;
case 17: case 97:
 this.$ = [$$[$0]]; 
break;
case 18: case 40: case 44: case 98:
 this.$ = $$[$0-2].concat([$$[$0]]); 
break;
case 20: case 41: case 45:
 this.$ = $$[$0-1].concat([$$[$0]]); 
break;
case 21:
 this.$ = { type: yy.NodeType.PropertyDeclaration, accessModifier: $$[$0-4], name: $$[$0-3], valueType: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 22:
 this.$ = { type: yy.NodeType.MethodDeclaration, accessModifier: $$[$0-7], name: $$[$0-6], args: $$[$0-4], returnType: $$[$0-1], body: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 23:
 this.$ = { type: yy.NodeType.MethodDeclaration, accessModifier: $$[$0-5], name: $$[$0-4], args: $$[$0-2], returnType: "void", body: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 25:
 this.$ = "pub"; 
break;
case 26:
 this.$ = "prot"; 
break;
case 29:
 this.$ = [{ name: $$[$0-2], valueType: $$[$0], location: yy.camelCase(this._$) }]; 
break;
case 30:
 this.$ = $$[$0-4].concat([{ name: $$[$0-2], valueType: $$[$0], location: yy.camelCase(yy.merge(_$[$0-2], _$[$0])) }]); 
break;
case 32: case 34:
 this.$ = [$$[$0-1]]; 
break;
case 33:
 this.$ = [$$[$0-2]]; 
break;
case 36:
 this.$ = $$[$0-2]; 
break;
case 38: case 42:
 this.$ = [$$[$0-2], $$[$0]]; 
break;
case 39: case 43:
 this.$ = [$$[$0-1], $$[$0]]; 
break;
case 46:
 this.$ = { type: yy.NodeType.If, condition: $$[$0-2], body: $$[$0-1], alternatives: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 48:
 this.$ = $$[$0-2].concat([{ type: yy.IfAlternativeType.Else, body: $$[$0], location: yy.camelCase(yy.merge(_$[$0-1], _$[$0])) }]); 
break;
case 50:
 this.$ = $$[$0-4].concat([{ type: yy.IfAlternativeType.ElseIf, condition: $$[$0-1], body: $$[$0], location: yy.camelCase(yy.merge(_$[$0-3], _$[$0])) }]); 
break;
case 53:
 this.$ = yy.unaryExpr("-", $$[$0], this._$); 
break;
case 54: case 68:
 this.$ = yy.binaryExpr("||", $$[$0-2], $$[$0], this._$); 
break;
case 55: case 69:
 this.$ = yy.binaryExpr("&&", $$[$0-2], $$[$0], this._$); 
break;
case 56: case 70:
 this.$ = yy.binaryExpr("==", $$[$0-2], $$[$0], this._$); 
break;
case 57: case 71:
 this.$ = yy.binaryExpr("!=", $$[$0-2], $$[$0], this._$); 
break;
case 58: case 72:
 this.$ = yy.binaryExpr("<", $$[$0-2], $$[$0], this._$); 
break;
case 59: case 73:
 this.$ = yy.binaryExpr("<=", $$[$0-2], $$[$0], this._$); 
break;
case 60: case 74:
 this.$ = yy.binaryExpr(">", $$[$0-2], $$[$0], this._$); 
break;
case 61: case 75:
 this.$ = yy.binaryExpr(">=", $$[$0-2], $$[$0], this._$); 
break;
case 62: case 76:
 this.$ = yy.binaryExpr("+", $$[$0-2], $$[$0], this._$); 
break;
case 63: case 77:
 this.$ = yy.binaryExpr("-", $$[$0-2], $$[$0], this._$); 
break;
case 64: case 78:
 this.$ = yy.binaryExpr("*", $$[$0-2], $$[$0], this._$); 
break;
case 65: case 79:
 this.$ = yy.binaryExpr("/", $$[$0-2], $$[$0], this._$); 
break;
case 66: case 80:
 this.$ = yy.binaryExpr("%", $$[$0-2], $$[$0], this._$); 
break;
case 67: case 81:
 this.$ = yy.binaryExpr("**", $$[$0-2], $$[$0], this._$); 
break;
case 82:
 this.$ = yy.unaryExpr("!", $$[$0], this._$); 
break;
case 84:
 this.$ = { type: yy.NodeType.NumberLiteral, value: yytext, location: yy.camelCase(this._$) }; 
break;
case 85:
 this.$ = { type: yy.NodeType.StringLiteral, value: yytext, location: yy.camelCase(this._$) }; 
break;
case 87:
 this.$ = { type: yy.NodeType.FunctionCall, callee: $$[$0-3], args: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 88:
 this.$ = { type: yy.NodeType.Identifier, value: yytext, location: yy.camelCase(this._$) }; 
break;
case 89: case 90:
 this.$ = yy.binaryExpr(".", $$[$0-2], $$[$0], this._$); 
break;
case 91: case 92:
 this.$ = yy.binaryExpr("[", $$[$0-3], $$[$0-1], this._$); 
break;
}
},
table: [{3:1,4:2,7:[1,3]},{1:[3]},o($V0,[2,9],{5:4}),{8:[1,5]},{6:[1,6],8:[1,7]},{9:[1,8]},{1:[2,1]},{9:[1,9]},o($V1,$V2,{10:10,15:$V3}),o($V1,$V2,{10:12,15:$V3}),{11:13,12:$V4,18:$V5},{9:[1,16],16:15},{11:17,12:$V4,18:$V5},{12:[1,18]},{9:$V6,19:19},{17:[1,21],20:[1,22]},o($V7,[2,5],{18:[1,23]}),{12:[1,24]},o($V8,$V9,{13:25}),{12:[2,12],22:$Va},o($Vb,[2,14],{15:[1,27]}),o($V1,[2,4]),{9:[1,28]},{9:$V6,19:29},o($V8,$V9,{13:30}),{7:$Vc,9:$Vd,14:[1,31],25:32,26:33,32:$Ve},{23:[1,36],24:[1,37]},{9:$V6,19:39,21:38},o($V7,[2,7],{18:[1,40]}),o($V7,[2,6],{22:$Va}),{7:$Vc,9:$Vd,14:[1,41],25:32,26:33,32:$Ve},o($V0,[2,2]),o($V8,[2,20]),{9:[1,42]},{9:[2,25]},{9:[2,26]},o($Vb,[2,15]),{23:[1,43]},{17:[1,44],20:[1,45]},o($V7,[2,17],{22:$Va}),{9:$V6,19:46},o($V0,[2,10]),{24:[1,47],28:[1,48]},o($Vb,[2,16]),o($Vb,[2,13]),{9:$V6,19:49},o($V7,[2,8],{22:$Va}),{9:$V6,19:50},{9:[1,53],29:51,30:[2,27],33:52},o($V7,[2,18],{22:$Va}),{22:$Va,27:[1,54]},{30:[1,55]},{20:[1,56],30:[2,28]},{24:[1,57]},o($V8,[2,21]),{12:$Vf,24:[1,58],31:59},{9:[1,61]},{9:$V6,19:62},{9:$V6,19:63},o($V8,[2,23]),{9:$Vg,14:[1,64],34:65,35:66,36:67,37:68,38:70,39:$Vh,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{24:[1,79]},o($Vm,[2,29],{22:$Va}),{12:$Vf,22:$Va,31:80},o($Vn,[2,31]),{14:[1,81],27:[1,82]},{9:$Vg,14:[1,83],35:85,38:84,39:$Vh,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{14:[1,86],27:[1,87]},{9:$Vg,14:[1,88],35:90,38:89,39:$Vh,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},o($Vo,[2,51],{15:[1,95],17:[1,97],45:[1,100],46:[1,91],47:[1,92],48:[1,93],49:[1,94],50:[1,96],51:[1,98],52:[1,99],53:[1,101],54:[1,102],55:[1,103],56:[1,104]}),o($Vo,[2,52],{15:$Vp,17:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC}),{9:$Vg,34:121,35:120,38:70,39:$Vh,40:119,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:122,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:123,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},o($VD,[2,83],{22:[1,125],63:[1,124]}),o($VD,[2,84]),o($VD,[2,85]),o($VD,[2,86],{22:[1,128],28:[1,126],63:[1,127]}),o($VE,[2,88]),{9:$V6,19:129},o($V8,[2,22]),o($Vn,[2,32]),{9:$Vg,14:[1,130],34:131,35:132,38:70,39:$Vh,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},o($Vn,[2,34]),o($VF,[2,39],{15:$Vp,17:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC}),o($VG,[2,43]),o($Vn,[2,35]),{9:$Vg,14:[1,133],34:134,35:135,38:70,39:$Vh,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},o($Vn,[2,37]),o($VF,[2,41],{15:$Vp,17:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC}),o($VG,[2,45]),{9:$Vg,34:121,35:120,38:70,39:$Vh,40:136,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:137,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:138,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:139,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:140,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:141,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:142,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:143,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:144,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:145,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:146,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:147,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:148,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:149,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:150,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:151,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:152,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:153,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:154,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:155,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:156,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:157,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:158,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:159,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:160,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:161,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:162,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:163,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{12:$Vf,31:164},o($VD,[2,93]),o($VD,[2,94]),o($VD,[2,53]),o($VD,[2,82]),{9:[1,165]},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:166,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{9:$Vg,30:[2,95],34:121,35:120,38:70,39:$Vh,40:169,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77,62:167,64:168},{9:[1,170]},{9:$Vg,34:121,35:120,38:70,39:$Vh,40:171,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},o($Vm,[2,30],{22:$Va}),o($Vn,[2,33]),o($VF,[2,38]),o($VG,[2,42]),o($Vn,[2,36]),o($VF,[2,40]),o($VG,[2,44]),o($VD,[2,54]),o($VD,[2,55]),o($VD,[2,56]),o($VD,[2,57]),o($VD,[2,58]),o($VD,[2,59]),o($VD,[2,60]),o($VD,[2,61]),o($VD,[2,62]),o($VD,[2,63]),o($VD,[2,64]),o($VD,[2,65]),o($VD,[2,66]),o($VD,[2,67]),o($VD,[2,68]),o($VD,[2,69]),o($VD,[2,70]),o($VD,[2,71]),o($VD,[2,72]),o($VD,[2,73]),o($VD,[2,74]),o($VD,[2,75]),o($VD,[2,76]),o($VD,[2,77]),o($VD,[2,78]),o($VD,[2,79]),o($VD,[2,80]),o($VD,[2,81]),o($VH,[2,49],{41:172,42:173}),o($VE,[2,90]),{23:[1,174]},{30:[1,175]},{20:[1,176],30:[2,96]},o($Vm,[2,97]),o($VE,[2,89]),{23:[1,177]},o($VI,[2,46]),o($VI,[2,47],{43:[1,178]}),o($VE,[2,92]),o([12,14,15,17,20,22,23,27,30,45,46,47,48,49,50,51,52,53,54,55,56,63],[2,87]),{9:$Vg,34:121,35:120,38:70,39:$Vh,40:179,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},o($VE,[2,91]),{12:$Vf,31:180,39:[1,181]},o($Vm,[2,98]),o($VI,[2,48]),{9:$Vg,34:121,35:120,38:70,39:$Vh,40:182,44:69,45:$Vi,57:$Vj,58:74,59:$Vk,60:$Vl,61:77},{12:$Vf,31:183},o($VH,[2,50])],
defaultActions: {6:[2,1],34:[2,25],35:[2,26]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return "pub"
break;
case 2:return "prot"
break;
case 3:return "class"
break;
case 4:return "extends"
break;
case 5:return "if"
break;
case 6:return "else"
break;
case 7:return "return"
break;
case 8:return "NUMBER"
break;
case 9:return "STRING"
break;
case 10:return "IDENTIFIER"
break;
case 11:return "**"
break;
case 12:return "*"
break;
case 13:return "/"
break;
case 14:return "%"
break;
case 15:return "-"
break;
case 16:return "+"
break;
case 17:return "=="
break;
case 18:return "!="
break;
case 19:return "<"
break;
case 20:return "<="
break;
case 21:return ">"
break;
case 22:return ">="
break;
case 23:return "!"
break;
case 24:return "&&"
break;
case 25:return "||"
break;
case 26:return "."
break;
case 27:return "["
break;
case 28:return "]"
break;
case 29:return "("
break;
case 30:return ")"
break;
case 31:return "{"
break;
case 32:return "}"
break;
case 33:return ":"
break;
case 34:return ","
break;
case 35:return ";"
break;
case 36:return "EOF"
break;
case 37:return "INVALID"
break;
}
},
rules: [/^(?:\s+)/,/^(?:pub\b)/,/^(?:prot\b)/,/^(?:class\b)/,/^(?:extends\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:-?\d+(\.\d+)?(e?[1-9]\d*)?\b)/,/^(?:"(\\(u[0-9a-fA-F]{4}|[\\"nt])|[^\\"])*")/,/^(?:[_a-zA-Z]\w*)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>=)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}