/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,8],$V1=[12,18],$V2=[2,3],$V3=[1,11],$V4=[2,11],$V5=[1,14],$V6=[1,23],$V7=[17,20],$V8=[7,9,14,38],$V9=[2,24],$Va=[1,29],$Vb=[12,17,20,26,33,36,50],$Vc=[12,17,20,23,26,33,36,50],$Vd=[12,15,17,20,23,26,29,33,36,50],$Ve=[1,39],$Vf=[2,29],$Vg=[1,40],$Vh=[1,66],$Vi=[1,93],$Vj=[1,88],$Vk=[1,89],$Vl=[1,90],$Vm=[1,91],$Vn=[1,92],$Vo=[1,78],$Vp=[1,82],$Vq=[1,83],$Vr=[1,85],$Vs=[1,86],$Vt=[20,36],$Vu=[7,9,12,14,15,17,20,27,28,33,36,38,49,52,53,54,56,57,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76],$Vv=[1,106],$Vw=[1,108],$Vx=[1,112],$Vy=[1,111],$Vz=[1,102],$VA=[1,103],$VB=[1,104],$VC=[1,105],$VD=[1,107],$VE=[1,109],$VF=[1,110],$VG=[1,113],$VH=[1,114],$VI=[1,115],$VJ=[12,14,20,27,33,36],$VK=[1,144],$VL=[1,146],$VM=[1,150],$VN=[1,149],$VO=[1,140],$VP=[1,141],$VQ=[1,142],$VR=[1,143],$VS=[1,145],$VT=[1,147],$VU=[1,148],$VV=[1,151],$VW=[1,152],$VX=[1,153],$VY=[9,14,49,52,53,54,56,57,74,75,76],$VZ=[12,14,15,17,20,27,28,33,36,62,64,65,66,67,68,69,70,71,72,73],$V_=[1,163],$V$=[1,162],$V01=[2,129],$V11=[1,167],$V21=[1,166],$V31=[1,165],$V41=[12,14,15,17,20,26,27,28,29,33,34,36,50,62,64,65,66,67,68,69,70,71,72,73],$V51=[14,33],$V61=[9,12,14,15,17,20,27,28,33,36,49,52,53,54,56,57,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76],$V71=[9,12,14,15,17,20,27,28,33,36,49,52,53,54,56,57,62,64,65,66,67,68,69,70,71,72,73,74,75,76];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"classes":3,"pubClass":4,"optPrivClasses":5,"EOF":6,"pub":7,"class":8,"IDENTIFIER":9,"optTypeArgDefs":10,"optExtension":11,"{":12,"classBody":13,"}":14,"<":15,"typeArgDefs":16,">":17,"extends":18,"type":19,",":20,"nullableType":21,"nonNullableType":22,"?":23,"typeIdentifierWithPossibleDotChain":24,"typeArgs":25,"[":26,"]":27,"*":28,".":29,"classItem":30,"optAccessModifier":31,":":32,";":33,"(":34,"optArgDefs":35,")":36,"compoundExpression":37,"prot":38,"argDefs":39,"expressionLackingRightDelimiter":40,"expressionIncludingRightDelimiter":41,"statement":42,"twoOrMoreExpressionsWhereTheLastLacksRightDelimiter":43,"twoOrMoreExpressionsWhereTheLastIncludesRightDelimiter":44,"expressionLackingRightDelimiterNotStartingWithInfixToken":45,"localVariableDeclaration":46,"assignment":47,"return":48,"let":49,"=":50,"expression":51,"let!":52,"re":53,"re!":54,"assignableExpression":55,"return_":56,"if":57,"optElseExpression":58,"optElseIfExpression":59,"else":60,"expressionLackingRightDelimiterStartingWithInfixToken":61,"-":62,"functionCall":63,"||":64,"&&":65,"==":66,"!=":67,"<=":68,">=":69,"+":70,"/":71,"%":72,"**":73,"!":74,"NUMBER":75,"STRING":76,"optArgs":77,"args":78,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"pub",8:"class",9:"IDENTIFIER",12:"{",14:"}",15:"<",17:">",18:"extends",20:",",23:"?",26:"[",27:"]",28:"*",29:".",32:":",33:";",34:"(",36:")",38:"prot",49:"let",50:"=",52:"let!",53:"re",54:"re!",56:"return_",57:"if",60:"else",62:"-",64:"||",65:"&&",66:"==",67:"!=",68:"<=",69:">=",70:"+",71:"/",72:"%",73:"**",74:"!",75:"NUMBER",76:"STRING"},
productions_: [0,[3,3],[4,8],[10,0],[10,3],[16,1],[16,3],[16,3],[16,5],[5,0],[5,8],[11,0],[11,2],[19,1],[19,1],[21,2],[22,4],[22,1],[22,3],[22,4],[24,1],[24,3],[25,1],[25,3],[13,0],[13,2],[30,5],[30,8],[30,6],[31,0],[31,1],[31,1],[35,0],[35,1],[39,3],[39,5],[37,2],[37,3],[37,4],[37,3],[37,3],[37,3],[37,4],[37,3],[43,3],[43,2],[43,2],[43,3],[43,2],[44,3],[44,2],[44,2],[44,3],[44,2],[44,2],[44,3],[44,2],[44,3],[44,2],[42,1],[42,1],[42,1],[46,5],[46,5],[46,5],[46,5],[46,7],[46,7],[46,7],[46,7],[47,4],[48,3],[48,2],[41,4],[58,1],[58,3],[59,0],[59,5],[40,1],[40,1],[61,2],[61,2],[61,2],[61,3],[61,3],[61,3],[61,3],[61,3],[61,3],[61,3],[61,3],[61,3],[61,3],[61,3],[61,3],[61,3],[61,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,2],[45,1],[45,1],[45,1],[45,1],[63,4],[55,1],[55,3],[55,3],[55,4],[55,4],[51,1],[51,1],[77,0],[77,1],[78,1],[78,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return { type: yy.NodeType.File, pubClass: $$[$0-2], privClasses: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 2:
 this.$ = { type: yy.NodeType.Class, isPub: true, name: $$[$0-5], typeArgDefs: $$[$0-4], superClass: $$[$0-3], items: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 3: case 9: case 24: case 32: case 36: case 76: case 138:
 this.$ = []; 
break;
case 4: case 41: case 43:
 this.$ = $$[$0-1]; 
break;
case 5:
 this.$ = [{ name: $$[$0], constraint: { constraintType: yy.ConstraintType.None }, location: yy.camelCase(this._$) }]; 
break;
case 6:
 this.$ = [{ name: $$[$0-2], constraint: { constraintType: yy.ConstraintType.Extends, superClass: $$[$0] }, location: yy.camelCase(this._$) }]; 
break;
case 7:
 this.$ = $$[$0-2].concat([{ name: $$[$0], constraint: { constraintType: yy.ConstraintType.None }, location: yy.camelCase(_$[$0]) }]); 
break;
case 8:
 this.$ = $$[$0-4].concat([{ name: $$[$0-2], constraint: { constraintType: yy.ConstraintType.Extends, superClass: $$[$0] }, location: yy.camelCase(yy.merge(_$[$0-2], _$[$0])) }]); 
break;
case 10:
 this.$ = $$[$0-7].concat([{ type: yy.NodeType.Class, isPub: false, name: $$[$0-5], typeArgDefs: $$[$0-4], superClass: $$[$0-3], items: $$[$0-1], location: yy.camelCase(yy.merge(_$[$0-6], _$[$0])) }]); 
break;
case 11: case 29:
 this.$ = null; 
break;
case 12:
 this.$ = $$[$0]; 
break;
case 15:
 this.$ = { name: "nullable", args: [$$[$0-1]], location: yy.camelCase(this._$) }; 
break;
case 16:
 this.$ = { name: $$[$0-3], args: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 17:
 this.$ = { name: $$[$0], args: [], location: yy.camelCase(this._$) }; 
break;
case 18:
 this.$ = { name: "array", args: [$$[$0-2]], location: yy.camelCase(this._$) }; 
break;
case 19:
 this.$ = { name: "java.util.ArrayList", args: [yy.wrapPrimitiveIfNeeded($$[$0-3])], location: yy.camelCase(this._$) }; 
break;
case 21:
 this.$ = $$[$0-2] + "." + $$[$0-1]; 
break;
case 22: case 140:
 this.$ = [$$[$0]]; 
break;
case 23: case 47: case 55: case 57: case 141:
 this.$ = $$[$0-2].concat([$$[$0]]); 
break;
case 25: case 48: case 56: case 58:
 this.$ = $$[$0-1].concat([$$[$0]]); 
break;
case 26:
 this.$ = { type: yy.NodeType.PropertyDeclaration, accessModifier: $$[$0-4], name: $$[$0-3], valueType: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 27:
 this.$ = { type: yy.NodeType.MethodDeclaration, accessModifier: $$[$0-7], name: $$[$0-6], args: $$[$0-4], returnType: $$[$0-1], body: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 28:
 this.$ = { type: yy.NodeType.MethodDeclaration, accessModifier: $$[$0-5], name: $$[$0-4], args: $$[$0-2], returnType: "void", body: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 30:
 this.$ = "pub"; 
break;
case 31:
 this.$ = "prot"; 
break;
case 34:
 this.$ = [{ name: $$[$0-2], valueType: $$[$0], location: yy.camelCase(this._$) }]; 
break;
case 35:
 this.$ = $$[$0-4].concat([{ name: $$[$0-2], valueType: $$[$0], location: yy.camelCase(yy.merge(_$[$0-2], _$[$0])) }]); 
break;
case 37: case 39: case 40:
 this.$ = [$$[$0-1]]; 
break;
case 38:
 this.$ = [$$[$0-2]]; 
break;
case 42:
 this.$ = $$[$0-2]; 
break;
case 44: case 49: case 52:
 this.$ = [$$[$0-2], $$[$0]]; 
break;
case 45: case 46: case 50: case 51: case 53: case 54:
 this.$ = [$$[$0-1], $$[$0]]; 
break;
case 62:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: false, doesShadow: false, name: $$[$0-3], initialValue: $$[$0-1], valueType: null, location: yy.camelCase(this._$) }; 
break;
case 63:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: false, doesShadow: true, name: $$[$0-3], initialValue: $$[$0-1], valueType: null, location: yy.camelCase(this._$) }; 
break;
case 64:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: true, doesShadow: false, name: $$[$0-3], initialValue: $$[$0-1], valueType: null, location: yy.camelCase(this._$) }; 
break;
case 65:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: true, doesShadow: true, name: $$[$0-3], initialValue: $$[$0-1], valueType: null, location: yy.camelCase(this._$) }; 
break;
case 66:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: false, doesShadow: false, name: $$[$0-5], initialValue: $$[$0-1], valueType: $$[$0-3], location: yy.camelCase(this._$) }; 
break;
case 67:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: false, doesShadow: true, name: $$[$0-5], initialValue: $$[$0-1], valueType: $$[$0-3], location: yy.camelCase(this._$) }; 
break;
case 68:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: true, doesShadow: false, name: $$[$0-5], initialValue: $$[$0-1], valueType: $$[$0-3], location: yy.camelCase(this._$) }; 
break;
case 69:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: true, doesShadow: true, name: $$[$0-5], initialValue: $$[$0-1], valueType: $$[$0-3], location: yy.camelCase(this._$) }; 
break;
case 70:
 this.$ = { type: yy.NodeType.Assignment, assignee: $$[$0-3], value: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 71:
 this.$ = { type: yy.NodeType.Return, value: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 72:
 this.$ = { type: yy.NodeType.Return, value: null, location: yy.camelCase(this._$) }; 
break;
case 73:
 this.$ = { type: yy.NodeType.If, condition: $$[$0-2], body: $$[$0-1], alternatives: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 75:
 this.$ = $$[$0-2].concat([{ type: yy.IfAlternativeType.Else, body: $$[$0], location: yy.camelCase(yy.merge(_$[$0-1], _$[$0])) }]); 
break;
case 77:
 this.$ = $$[$0-4].concat([{ type: yy.IfAlternativeType.ElseIf, condition: $$[$0-1], body: $$[$0], location: yy.camelCase(yy.merge(_$[$0-3], _$[$0])) }]); 
break;
case 80: case 81: case 82:
 this.$ = yy.unaryExpr("-", $$[$0], this._$); 
break;
case 83: case 97: case 111:
 this.$ = yy.binaryExpr("||", $$[$0-2], $$[$0], this._$); 
break;
case 84: case 98: case 112:
 this.$ = yy.binaryExpr("&&", $$[$0-2], $$[$0], this._$); 
break;
case 85: case 99: case 113:
 this.$ = yy.binaryExpr("==", $$[$0-2], $$[$0], this._$); 
break;
case 86: case 100: case 114:
 this.$ = yy.binaryExpr("!=", $$[$0-2], $$[$0], this._$); 
break;
case 87: case 101: case 115:
 this.$ = yy.binaryExpr("<", $$[$0-2], $$[$0], this._$); 
break;
case 88: case 102: case 116:
 this.$ = yy.binaryExpr("<=", $$[$0-2], $$[$0], this._$); 
break;
case 89: case 103: case 117:
 this.$ = yy.binaryExpr(">", $$[$0-2], $$[$0], this._$); 
break;
case 90: case 104: case 118:
 this.$ = yy.binaryExpr(">=", $$[$0-2], $$[$0], this._$); 
break;
case 91: case 105: case 119:
 this.$ = yy.binaryExpr("+", $$[$0-2], $$[$0], this._$); 
break;
case 92: case 106: case 120:
 this.$ = yy.binaryExpr("-", $$[$0-2], $$[$0], this._$); 
break;
case 93: case 107: case 121:
 this.$ = yy.binaryExpr("*", $$[$0-2], $$[$0], this._$); 
break;
case 94: case 108: case 122:
 this.$ = yy.binaryExpr("/", $$[$0-2], $$[$0], this._$); 
break;
case 95: case 109: case 123:
 this.$ = yy.binaryExpr("%", $$[$0-2], $$[$0], this._$); 
break;
case 96: case 110: case 124:
 this.$ = yy.binaryExpr("**", $$[$0-2], $$[$0], this._$); 
break;
case 125:
 this.$ = yy.unaryExpr("!", $$[$0], this._$); 
break;
case 127:
 this.$ = { type: yy.NodeType.NumberLiteral, value: yytext, location: yy.camelCase(this._$) }; 
break;
case 128:
 this.$ = { type: yy.NodeType.StringLiteral, value: yytext, location: yy.camelCase(this._$) }; 
break;
case 130:
 this.$ = { type: yy.NodeType.FunctionCall, callee: $$[$0-3], args: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 131:
 this.$ = { type: yy.NodeType.Identifier, value: yytext, location: yy.camelCase(this._$) }; 
break;
case 132: case 133:
 this.$ = yy.binaryExpr(".", $$[$0-2], $$[$0], this._$); 
break;
case 134: case 135:
 this.$ = yy.binaryExpr("[", $$[$0-3], $$[$0-1], this._$); 
break;
}
},
table: [{3:1,4:2,7:[1,3]},{1:[3]},o($V0,[2,9],{5:4}),{8:[1,5]},{6:[1,6],8:[1,7]},{9:[1,8]},{1:[2,1]},{9:[1,9]},o($V1,$V2,{10:10,15:$V3}),o($V1,$V2,{10:12,15:$V3}),{11:13,12:$V4,18:$V5},{9:[1,16],16:15},{11:17,12:$V4,18:$V5},{12:[1,18]},{9:$V6,19:19,21:20,22:21,24:22},{17:[1,24],20:[1,25]},o($V7,[2,5],{18:[1,26]}),{12:[1,27]},o($V8,$V9,{13:28}),{12:[2,12],26:$Va},o($Vb,[2,13]),o($Vb,[2,14],{23:[1,30]}),o($Vc,[2,17],{15:[1,31],29:[1,32]}),o($Vd,[2,20]),o($V1,[2,4]),{9:[1,33]},{9:$V6,19:34,21:20,22:21,24:22},o($V8,$V9,{13:35}),{7:$Ve,9:$Vf,14:[1,36],30:37,31:38,38:$Vg},{27:[1,41],28:[1,42]},o($Vb,[2,15]),{9:$V6,19:44,21:20,22:21,24:22,25:43},{9:[1,45]},o($V7,[2,7],{18:[1,46]}),o($V7,[2,6],{26:$Va}),{7:$Ve,9:$Vf,14:[1,47],30:37,31:38,38:$Vg},o($V0,[2,2]),o($V8,[2,25]),{9:[1,48]},{9:[2,30]},{9:[2,31]},o($Vc,[2,18]),{27:[1,49]},{17:[1,50],20:[1,51]},o($V7,[2,22],{26:$Va}),o($Vd,[2,21]),{9:$V6,19:52,21:20,22:21,24:22},o($V0,[2,10]),{32:[1,53],34:[1,54]},o($Vc,[2,19]),o($Vc,[2,16]),{9:$V6,19:55,21:20,22:21,24:22},o($V7,[2,8],{26:$Va}),{9:$V6,19:56,21:20,22:21,24:22},{9:[1,59],35:57,36:[2,32],39:58},o($V7,[2,23],{26:$Va}),{26:$Va,33:[1,60]},{36:[1,61]},{20:[1,62],36:[2,33]},{32:[1,63]},o($V8,[2,26]),{12:$Vh,32:[1,64],37:65},{9:[1,67]},{9:$V6,19:68,21:20,22:21,24:22},{9:$V6,19:69,21:20,22:21,24:22},o($V8,[2,28]),{9:$Vi,14:[1,70],40:71,41:72,42:73,43:74,44:75,45:77,46:79,47:80,48:81,49:$Vj,52:$Vk,53:$Vl,54:$Vm,55:87,56:$Vn,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{32:[1,94]},o($Vt,[2,34],{26:$Va}),{12:$Vh,26:$Va,37:95},o($Vu,[2,36]),{14:[1,96],33:[1,97]},{9:$Vi,14:[1,98],15:$Vv,17:$Vw,28:$Vx,41:100,42:101,45:99,46:79,47:80,48:81,49:$Vj,52:$Vk,53:$Vl,54:$Vm,55:87,56:$Vn,57:$Vo,62:$Vy,63:84,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,14:[1,116],41:118,42:119,45:117,46:79,47:80,48:81,49:$Vj,52:$Vk,53:$Vl,54:$Vm,55:87,56:$Vn,57:$Vo,63:84,74:$Vq,75:$Vr,76:$Vs},{14:[1,120],33:[1,121]},{9:$Vi,14:[1,122],41:124,42:125,45:123,46:79,47:80,48:81,49:$Vj,52:$Vk,53:$Vl,54:$Vm,55:87,56:$Vn,57:$Vo,63:84,74:$Vq,75:$Vr,76:$Vs},o($VJ,[2,78],{15:[1,130],17:[1,132],28:[1,136],62:[1,135],64:[1,126],65:[1,127],66:[1,128],67:[1,129],68:[1,131],69:[1,133],70:[1,134],71:[1,137],72:[1,138],73:[1,139]}),o($VJ,[2,79],{15:$VK,17:$VL,28:$VM,62:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX}),{9:$Vi,40:156,41:155,45:77,51:154,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},o($VY,[2,59]),o($VY,[2,60]),o($VY,[2,61]),{9:$Vi,41:160,55:158,57:$Vo,63:159},{9:$Vi,40:156,41:155,45:77,51:161,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},o($VZ,[2,126],{26:$V_,29:$V$}),o($VZ,[2,127]),o($VZ,[2,128]),o([14,15,17,28,33,62,64,65,66,67,68,69,70,71,72,73],$V01,{26:$V11,29:$V21,34:$V31,50:[1,164]}),{9:[1,168]},{9:[1,169]},{9:[1,170]},{9:[1,171]},{9:$Vi,33:[1,173],40:156,41:155,45:77,51:172,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},o($V41,[2,131]),{9:$V6,19:174,21:20,22:21,24:22},o($V8,[2,27]),o($Vu,[2,37]),{9:$Vi,14:[1,175],40:176,41:177,42:178,45:77,46:79,47:80,48:81,49:$Vj,52:$Vk,53:$Vl,54:$Vm,55:87,56:$Vn,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},o($Vu,[2,39]),o($V51,[2,45],{15:$VK,17:$VL,28:$VM,62:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX}),o($VY,[2,50],{15:$Vv,17:$Vw,28:$Vx,62:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI}),o($VY,[2,53]),{9:$Vi,40:156,41:155,45:77,51:179,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:180,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:181,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:182,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:183,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:184,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:185,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:186,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:187,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:188,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:189,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:190,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:191,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:192,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},o($Vu,[2,40]),o($V51,[2,46],{15:$VK,17:$VL,28:$VM,62:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX}),o($VY,[2,51],{15:$Vv,17:$Vw,28:$Vx,62:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI}),o($VY,[2,54]),o($Vu,[2,41]),{9:$Vi,14:[1,193],40:194,41:195,42:196,45:77,46:79,47:80,48:81,49:$Vj,52:$Vk,53:$Vl,54:$Vm,55:87,56:$Vn,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},o($Vu,[2,43]),o($V51,[2,48],{15:$VK,17:$VL,28:$VM,62:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX}),o($VY,[2,56],{15:$Vv,17:$Vw,28:$Vx,62:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI}),o($VY,[2,58]),{9:$Vi,40:156,41:155,45:77,51:197,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:198,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:199,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:200,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:201,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:202,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:203,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:204,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:205,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:206,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:207,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:208,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:209,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:210,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:211,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:212,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:213,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:214,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:215,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:216,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:217,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:218,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:219,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:220,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:221,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:222,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:223,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:224,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{12:$Vh,37:225},o($VJ,[2,136],{15:$Vv,17:$Vw,28:$Vx,62:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI}),o($VZ,[2,137]),o($VZ,$V01,{26:$V11,29:$V21,34:$V31}),o($VZ,[2,80],{26:$V11,29:$V21,34:$V31}),o($VZ,[2,81],{26:$V_,29:$V$}),o($VZ,[2,82]),o($VZ,[2,125]),{9:[1,226]},{9:$Vi,40:156,41:155,45:77,51:227,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,40:156,41:155,45:77,51:228,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$Vi,36:[2,138],40:156,41:155,45:77,51:231,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs,77:229,78:230},{9:[1,232]},{9:$Vi,40:156,41:155,45:77,51:233,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{32:[1,235],50:[1,234]},{32:[1,237],50:[1,236]},{32:[1,239],50:[1,238]},{32:[1,241],50:[1,240]},{33:[1,242]},o($VY,[2,72]),o($Vt,[2,35],{26:$Va}),o($Vu,[2,38]),o($V51,[2,44]),o($VY,[2,49],{15:$Vv,17:$Vw,28:$Vx,62:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI}),o($VY,[2,52]),o($VZ,[2,111]),o($VZ,[2,112]),o($VZ,[2,113]),o($VZ,[2,114]),o($VZ,[2,115]),o($VZ,[2,116]),o($VZ,[2,117]),o($VZ,[2,118]),o($VZ,[2,119]),o($VZ,[2,120]),o($VZ,[2,121]),o($VZ,[2,122]),o($VZ,[2,123]),o($VZ,[2,124]),o($Vu,[2,42]),o($V51,[2,47]),o($VY,[2,55],{15:$Vv,17:$Vw,28:$Vx,62:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI}),o($VY,[2,57]),o($VZ,[2,83]),o($VZ,[2,84]),o($VZ,[2,85]),o($VZ,[2,86]),o($VZ,[2,87]),o($VZ,[2,88]),o($VZ,[2,89]),o($VZ,[2,90]),o($VZ,[2,91]),o($VZ,[2,92]),o($VZ,[2,93]),o($VZ,[2,94]),o($VZ,[2,95]),o($VZ,[2,96]),o($VZ,[2,97]),o($VZ,[2,98]),o($VZ,[2,99]),o($VZ,[2,100]),o($VZ,[2,101]),o($VZ,[2,102]),o($VZ,[2,103]),o($VZ,[2,104]),o($VZ,[2,105]),o($VZ,[2,106]),o($VZ,[2,107]),o($VZ,[2,108]),o($VZ,[2,109]),o($VZ,[2,110]),o($V61,[2,76],{58:243,59:244}),o($V41,[2,133]),{27:[1,245]},{33:[1,246]},{36:[1,247]},{20:[1,248],36:[2,139]},o($Vt,[2,140]),o($V41,[2,132]),{27:[1,249]},{9:$Vi,40:156,41:155,45:77,51:250,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$V6,19:251,21:20,22:21,24:22},{9:$Vi,40:156,41:155,45:77,51:252,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$V6,19:253,21:20,22:21,24:22},{9:$Vi,40:156,41:155,45:77,51:254,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$V6,19:255,21:20,22:21,24:22},{9:$Vi,40:156,41:155,45:77,51:256,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{9:$V6,19:257,21:20,22:21,24:22},o($VY,[2,71]),o($V71,[2,73]),o($V71,[2,74],{60:[1,258]}),o($V41,[2,135]),o($VY,[2,70]),o([12,14,15,17,20,26,27,28,29,33,36,62,64,65,66,67,68,69,70,71,72,73],[2,130]),{9:$Vi,40:156,41:155,45:77,51:259,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},o($V41,[2,134]),{33:[1,260]},{26:$Va,50:[1,261]},{33:[1,262]},{26:$Va,50:[1,263]},{33:[1,264]},{26:$Va,50:[1,265]},{33:[1,266]},{26:$Va,50:[1,267]},{12:$Vh,37:268,57:[1,269]},o($Vt,[2,141]),o($VY,[2,62]),{9:$Vi,40:156,41:155,45:77,51:270,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},o($VY,[2,63]),{9:$Vi,40:156,41:155,45:77,51:271,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},o($VY,[2,64]),{9:$Vi,40:156,41:155,45:77,51:272,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},o($VY,[2,65]),{9:$Vi,40:156,41:155,45:77,51:273,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},o($V71,[2,75]),{9:$Vi,40:156,41:155,45:77,51:274,55:157,57:$Vo,61:76,62:$Vp,63:84,74:$Vq,75:$Vr,76:$Vs},{33:[1,275]},{33:[1,276]},{33:[1,277]},{33:[1,278]},{12:$Vh,37:279},o($VY,[2,66]),o($VY,[2,67]),o($VY,[2,68]),o($VY,[2,69]),o($V61,[2,77])],
defaultActions: {6:[2,1],39:[2,30],40:[2,31]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return "pub"
break;
case 2:return "prot"
break;
case 3:return "class"
break;
case 4:return "extends"
break;
case 5:return "if"
break;
case 6:return "else"
break;
case 7:return "return_"
break;
case 8:return "let!"
break;
case 9:return "let"
break;
case 10:return "re!"
break;
case 11:return "re"
break;
case 12:return "NUMBER"
break;
case 13:return "STRING"
break;
case 14:return "IDENTIFIER"
break;
case 15:return "**"
break;
case 16:return "*"
break;
case 17:return "/"
break;
case 18:return "%"
break;
case 19:return "-"
break;
case 20:return "+"
break;
case 21:return "=="
break;
case 22:return "!="
break;
case 23:return "<"
break;
case 24:return "<="
break;
case 25:return ">"
break;
case 26:return ">="
break;
case 27:return "!"
break;
case 28:return "&&"
break;
case 29:return "||"
break;
case 30:return "?"
break;
case 31:return "."
break;
case 32:return "["
break;
case 33:return "]"
break;
case 34:return "="
break;
case 35:return "("
break;
case 36:return ")"
break;
case 37:return "{"
break;
case 38:return "}"
break;
case 39:return ":"
break;
case 40:return ","
break;
case 41:return ";"
break;
case 42:return "EOF"
break;
case 43:return "INVALID"
break;
}
},
rules: [/^(?:\s+)/,/^(?:pub\b)/,/^(?:prot\b)/,/^(?:class\b)/,/^(?:extends\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:let!)/,/^(?:let\b)/,/^(?:re!)/,/^(?:re\b)/,/^(?:-?\d+(\.\d+)?(e?[1-9]\d*)?\b)/,/^(?:"(\\(u[0-9a-fA-F]{4}|[\\"nt])|[^\\"])*")/,/^(?:[_a-zA-Z]\w*)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>=)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\?)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}