/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,8],$V1=[12,18],$V2=[2,3],$V3=[1,11],$V4=[2,11],$V5=[1,14],$V6=[1,23],$V7=[17,20],$V8=[7,9,14,39],$V9=[2,25],$Va=[1,29],$Vb=[12,17,20,26,34,37,51],$Vc=[12,17,20,23,26,34,37,51],$Vd=[2,21],$Ve=[1,33],$Vf=[12,15,17,20,23,26,29,34,37,51],$Vg=[1,40],$Vh=[2,30],$Vi=[1,41],$Vj=[1,68],$Vk=[1,95],$Vl=[1,90],$Vm=[1,91],$Vn=[1,92],$Vo=[1,93],$Vp=[1,94],$Vq=[1,80],$Vr=[1,84],$Vs=[1,85],$Vt=[1,87],$Vu=[1,88],$Vv=[20,37],$Vw=[7,9,12,14,15,17,20,27,28,34,37,39,50,53,54,55,57,58,61,63,65,66,67,68,69,70,71,72,73,74,75,76,77],$Vx=[1,108],$Vy=[1,110],$Vz=[1,114],$VA=[1,113],$VB=[1,104],$VC=[1,105],$VD=[1,106],$VE=[1,107],$VF=[1,109],$VG=[1,111],$VH=[1,112],$VI=[1,115],$VJ=[1,116],$VK=[1,117],$VL=[12,14,20,27,34,37],$VM=[1,146],$VN=[1,148],$VO=[1,152],$VP=[1,151],$VQ=[1,142],$VR=[1,143],$VS=[1,144],$VT=[1,145],$VU=[1,147],$VV=[1,149],$VW=[1,150],$VX=[1,153],$VY=[1,154],$VZ=[1,155],$V_=[9,14,50,53,54,55,57,58,75,76,77],$V$=[12,14,15,17,20,27,28,34,37,63,65,66,67,68,69,70,71,72,73,74],$V01=[1,165],$V11=[1,164],$V21=[2,130],$V31=[1,169],$V41=[1,168],$V51=[12,14,15,17,20,26,27,28,29,34,35,37,51,63,65,66,67,68,69,70,71,72,73,74],$V61=[14,34],$V71=[9,12,14,15,17,20,27,28,34,37,50,53,54,55,57,58,61,63,65,66,67,68,69,70,71,72,73,74,75,76,77],$V81=[9,12,14,15,17,20,27,28,34,37,50,53,54,55,57,58,63,65,66,67,68,69,70,71,72,73,74,75,76,77];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"classes":3,"pubClass":4,"optPrivClasses":5,"EOF":6,"pub":7,"class":8,"IDENTIFIER":9,"optTypeArgDefs":10,"optExtension":11,"{":12,"classBody":13,"}":14,"<":15,"typeArgDefs":16,">":17,"extends":18,"type":19,",":20,"nullableType":21,"nonNullableType":22,"?":23,"typeIdentifierWithPossibleDotChain":24,"optTypeArgs":25,"[":26,"]":27,"*":28,".":29,"typeArgs":30,"classItem":31,"optAccessModifier":32,":":33,";":34,"(":35,"optArgDefs":36,")":37,"compoundExpression":38,"prot":39,"argDefs":40,"expressionLackingRightDelimiter":41,"expressionIncludingRightDelimiter":42,"statement":43,"twoOrMoreExpressionsWhereTheLastLacksRightDelimiter":44,"twoOrMoreExpressionsWhereTheLastIncludesRightDelimiter":45,"expressionLackingRightDelimiterNotStartingWithInfixToken":46,"localVariableDeclaration":47,"assignment":48,"return":49,"let":50,"=":51,"expression":52,"let!":53,"re":54,"re!":55,"assignableExpression":56,"return_":57,"if":58,"optElseExpression":59,"optElseIfExpression":60,"else":61,"expressionLackingRightDelimiterStartingWithInfixToken":62,"-":63,"functionCall":64,"||":65,"&&":66,"==":67,"!=":68,"<=":69,">=":70,"+":71,"/":72,"%":73,"**":74,"!":75,"NUMBER":76,"STRING":77,"optArgs":78,"args":79,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"pub",8:"class",9:"IDENTIFIER",12:"{",14:"}",15:"<",17:">",18:"extends",20:",",23:"?",26:"[",27:"]",28:"*",29:".",33:":",34:";",35:"(",37:")",39:"prot",50:"let",51:"=",53:"let!",54:"re",55:"re!",57:"return_",58:"if",61:"else",63:"-",65:"||",66:"&&",67:"==",68:"!=",69:"<=",70:">=",71:"+",72:"/",73:"%",74:"**",75:"!",76:"NUMBER",77:"STRING"},
productions_: [0,[3,3],[4,8],[10,0],[10,3],[16,1],[16,3],[16,3],[16,5],[5,0],[5,8],[11,0],[11,2],[19,1],[19,1],[21,2],[22,2],[22,3],[22,4],[24,1],[24,3],[25,0],[25,3],[30,1],[30,3],[13,0],[13,2],[31,5],[31,9],[31,7],[32,0],[32,1],[32,1],[36,0],[36,1],[40,3],[40,5],[38,2],[38,3],[38,4],[38,3],[38,3],[38,3],[38,4],[38,3],[44,3],[44,2],[44,2],[44,3],[44,2],[45,3],[45,2],[45,2],[45,3],[45,2],[45,2],[45,3],[45,2],[45,3],[45,2],[43,1],[43,1],[43,1],[47,5],[47,5],[47,5],[47,5],[47,7],[47,7],[47,7],[47,7],[48,4],[49,3],[49,2],[42,4],[59,1],[59,3],[60,0],[60,5],[41,1],[41,1],[62,2],[62,2],[62,2],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,2],[46,1],[46,1],[46,1],[46,1],[64,5],[56,1],[56,3],[56,3],[56,4],[56,4],[52,1],[52,1],[78,0],[78,1],[79,1],[79,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return { type: yy.NodeType.File, pubClass: $$[$0-2], privClasses: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 2:
 this.$ = { type: yy.NodeType.Class, isPub: true, name: $$[$0-5], typeArgDefs: $$[$0-4], superClass: $$[$0-3], items: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 3: case 9: case 21: case 25: case 33: case 37: case 77: case 139:
 this.$ = []; 
break;
case 4: case 22: case 42: case 44:
 this.$ = $$[$0-1]; 
break;
case 5:
 this.$ = [{ name: $$[$0], constraint: { constraintType: yy.ConstraintType.None }, location: yy.camelCase(this._$) }]; 
break;
case 6:
 this.$ = [{ name: $$[$0-2], constraint: { constraintType: yy.ConstraintType.Extends, superClass: $$[$0] }, location: yy.camelCase(this._$) }]; 
break;
case 7:
 this.$ = $$[$0-2].concat([{ name: $$[$0], constraint: { constraintType: yy.ConstraintType.None }, location: yy.camelCase(_$[$0]) }]); 
break;
case 8:
 this.$ = $$[$0-4].concat([{ name: $$[$0-2], constraint: { constraintType: yy.ConstraintType.Extends, superClass: $$[$0] }, location: yy.camelCase(yy.merge(_$[$0-2], _$[$0])) }]); 
break;
case 10:
 this.$ = $$[$0-7].concat([{ type: yy.NodeType.Class, isPub: false, name: $$[$0-5], typeArgDefs: $$[$0-4], superClass: $$[$0-3], items: $$[$0-1], location: yy.camelCase(yy.merge(_$[$0-6], _$[$0])) }]); 
break;
case 11: case 30:
 this.$ = null; 
break;
case 12:
 this.$ = $$[$0]; 
break;
case 15:
 this.$ = { name: "nullable", args: [$$[$0-1]], location: yy.camelCase(this._$) }; 
break;
case 16:
 this.$ = { name: $$[$0-1], args: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 17:
 this.$ = { name: "array", args: [$$[$0-2]], location: yy.camelCase(this._$) }; 
break;
case 18:
 this.$ = { name: "java.util.ArrayList", args: [yy.wrapPrimitiveIfNeeded($$[$0-3])], location: yy.camelCase(this._$) }; 
break;
case 20:
 this.$ = $$[$0-2] + "." + $$[$0-1]; 
break;
case 23: case 141:
 this.$ = [$$[$0]]; 
break;
case 24: case 48: case 56: case 58: case 142:
 this.$ = $$[$0-2].concat([$$[$0]]); 
break;
case 26: case 49: case 57: case 59:
 this.$ = $$[$0-1].concat([$$[$0]]); 
break;
case 27:
 this.$ = { type: yy.NodeType.PropertyDeclaration, accessModifier: $$[$0-4], name: $$[$0-3], valueType: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 28:
 this.$ = { type: yy.NodeType.MethodDeclaration, accessModifier: $$[$0-8], name: $$[$0-7], typeArgs: $$[$0-6], args: $$[$0-4], returnType: $$[$0-1], body: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 29:
 this.$ = { type: yy.NodeType.MethodDeclaration, accessModifier: $$[$0-6], name: $$[$0-5], typeArgs: $$[$0-4], args: $$[$0-2], returnType: "void", body: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 31:
 this.$ = "pub"; 
break;
case 32:
 this.$ = "prot"; 
break;
case 35:
 this.$ = [{ name: $$[$0-2], valueType: $$[$0], location: yy.camelCase(this._$) }]; 
break;
case 36:
 this.$ = $$[$0-4].concat([{ name: $$[$0-2], valueType: $$[$0], location: yy.camelCase(yy.merge(_$[$0-2], _$[$0])) }]); 
break;
case 38: case 40: case 41:
 this.$ = [$$[$0-1]]; 
break;
case 39:
 this.$ = [$$[$0-2]]; 
break;
case 43:
 this.$ = $$[$0-2]; 
break;
case 45: case 50: case 53:
 this.$ = [$$[$0-2], $$[$0]]; 
break;
case 46: case 47: case 51: case 52: case 54: case 55:
 this.$ = [$$[$0-1], $$[$0]]; 
break;
case 63:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: false, doesShadow: false, name: $$[$0-3], initialValue: $$[$0-1], valueType: null, location: yy.camelCase(this._$) }; 
break;
case 64:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: false, doesShadow: true, name: $$[$0-3], initialValue: $$[$0-1], valueType: null, location: yy.camelCase(this._$) }; 
break;
case 65:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: true, doesShadow: false, name: $$[$0-3], initialValue: $$[$0-1], valueType: null, location: yy.camelCase(this._$) }; 
break;
case 66:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: true, doesShadow: true, name: $$[$0-3], initialValue: $$[$0-1], valueType: null, location: yy.camelCase(this._$) }; 
break;
case 67:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: false, doesShadow: false, name: $$[$0-5], initialValue: $$[$0-1], valueType: $$[$0-3], location: yy.camelCase(this._$) }; 
break;
case 68:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: false, doesShadow: true, name: $$[$0-5], initialValue: $$[$0-1], valueType: $$[$0-3], location: yy.camelCase(this._$) }; 
break;
case 69:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: true, doesShadow: false, name: $$[$0-5], initialValue: $$[$0-1], valueType: $$[$0-3], location: yy.camelCase(this._$) }; 
break;
case 70:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: true, doesShadow: true, name: $$[$0-5], initialValue: $$[$0-1], valueType: $$[$0-3], location: yy.camelCase(this._$) }; 
break;
case 71:
 this.$ = { type: yy.NodeType.Assignment, assignee: $$[$0-3], value: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 72:
 this.$ = { type: yy.NodeType.Return, value: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 73:
 this.$ = { type: yy.NodeType.Return, value: null, location: yy.camelCase(this._$) }; 
break;
case 74:
 this.$ = { type: yy.NodeType.If, condition: $$[$0-2], body: $$[$0-1], alternatives: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 76:
 this.$ = $$[$0-2].concat([{ type: yy.IfAlternativeType.Else, body: $$[$0], location: yy.camelCase(yy.merge(_$[$0-1], _$[$0])) }]); 
break;
case 78:
 this.$ = $$[$0-4].concat([{ type: yy.IfAlternativeType.ElseIf, condition: $$[$0-1], body: $$[$0], location: yy.camelCase(yy.merge(_$[$0-3], _$[$0])) }]); 
break;
case 81: case 82: case 83:
 this.$ = yy.unaryExpr("-", $$[$0], this._$); 
break;
case 84: case 98: case 112:
 this.$ = yy.binaryExpr("||", $$[$0-2], $$[$0], this._$); 
break;
case 85: case 99: case 113:
 this.$ = yy.binaryExpr("&&", $$[$0-2], $$[$0], this._$); 
break;
case 86: case 100: case 114:
 this.$ = yy.binaryExpr("==", $$[$0-2], $$[$0], this._$); 
break;
case 87: case 101: case 115:
 this.$ = yy.binaryExpr("!=", $$[$0-2], $$[$0], this._$); 
break;
case 88: case 102: case 116:
 this.$ = yy.binaryExpr("<", $$[$0-2], $$[$0], this._$); 
break;
case 89: case 103: case 117:
 this.$ = yy.binaryExpr("<=", $$[$0-2], $$[$0], this._$); 
break;
case 90: case 104: case 118:
 this.$ = yy.binaryExpr(">", $$[$0-2], $$[$0], this._$); 
break;
case 91: case 105: case 119:
 this.$ = yy.binaryExpr(">=", $$[$0-2], $$[$0], this._$); 
break;
case 92: case 106: case 120:
 this.$ = yy.binaryExpr("+", $$[$0-2], $$[$0], this._$); 
break;
case 93: case 107: case 121:
 this.$ = yy.binaryExpr("-", $$[$0-2], $$[$0], this._$); 
break;
case 94: case 108: case 122:
 this.$ = yy.binaryExpr("*", $$[$0-2], $$[$0], this._$); 
break;
case 95: case 109: case 123:
 this.$ = yy.binaryExpr("/", $$[$0-2], $$[$0], this._$); 
break;
case 96: case 110: case 124:
 this.$ = yy.binaryExpr("%", $$[$0-2], $$[$0], this._$); 
break;
case 97: case 111: case 125:
 this.$ = yy.binaryExpr("**", $$[$0-2], $$[$0], this._$); 
break;
case 126:
 this.$ = yy.unaryExpr("!", $$[$0], this._$); 
break;
case 128:
 this.$ = { type: yy.NodeType.NumberLiteral, value: yytext, location: yy.camelCase(this._$) }; 
break;
case 129:
 this.$ = { type: yy.NodeType.StringLiteral, value: yytext, location: yy.camelCase(this._$) }; 
break;
case 131:
 this.$ = { type: yy.NodeType.FunctionCall, callee: $$[$0-4], typeArgs: $$[$0-3], args: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 132:
 this.$ = { type: yy.NodeType.Identifier, value: yytext, location: yy.camelCase(this._$) }; 
break;
case 133: case 134:
 this.$ = yy.binaryExpr(".", $$[$0-2], $$[$0], this._$); 
break;
case 135: case 136:
 this.$ = yy.binaryExpr("[", $$[$0-3], $$[$0-1], this._$); 
break;
}
},
table: [{3:1,4:2,7:[1,3]},{1:[3]},o($V0,[2,9],{5:4}),{8:[1,5]},{6:[1,6],8:[1,7]},{9:[1,8]},{1:[2,1]},{9:[1,9]},o($V1,$V2,{10:10,15:$V3}),o($V1,$V2,{10:12,15:$V3}),{11:13,12:$V4,18:$V5},{9:[1,16],16:15},{11:17,12:$V4,18:$V5},{12:[1,18]},{9:$V6,19:19,21:20,22:21,24:22},{17:[1,24],20:[1,25]},o($V7,[2,5],{18:[1,26]}),{12:[1,27]},o($V8,$V9,{13:28}),{12:[2,12],26:$Va},o($Vb,[2,13]),o($Vb,[2,14],{23:[1,30]}),o($Vc,$Vd,{25:31,15:$Ve,29:[1,32]}),o($Vf,[2,19]),o([12,18,35],[2,4]),{9:[1,34]},{9:$V6,19:35,21:20,22:21,24:22},o($V8,$V9,{13:36}),{7:$Vg,9:$Vh,14:[1,37],31:38,32:39,39:$Vi},{27:[1,42],28:[1,43]},o($Vb,[2,15]),o($Vc,[2,16]),{9:[1,44]},{9:$V6,19:46,21:20,22:21,24:22,30:45},o($V7,[2,7],{18:[1,47]}),o($V7,[2,6],{26:$Va}),{7:$Vg,9:$Vh,14:[1,48],31:38,32:39,39:$Vi},o($V0,[2,2]),o($V8,[2,26]),{9:[1,49]},{9:[2,31]},{9:[2,32]},o($Vc,[2,17]),{27:[1,50]},o($Vf,[2,20]),{17:[1,51],20:[1,52]},o($V7,[2,23],{26:$Va}),{9:$V6,19:53,21:20,22:21,24:22},o($V0,[2,10]),{10:55,15:$V3,33:[1,54],35:$V2},o($Vc,[2,18]),o([12,17,20,23,26,34,35,37,51],[2,22]),{9:$V6,19:56,21:20,22:21,24:22},o($V7,[2,8],{26:$Va}),{9:$V6,19:57,21:20,22:21,24:22},{35:[1,58]},o($V7,[2,24],{26:$Va}),{26:$Va,34:[1,59]},{9:[1,62],36:60,37:[2,33],40:61},o($V8,[2,27]),{37:[1,63]},{20:[1,64],37:[2,34]},{33:[1,65]},{12:$Vj,33:[1,66],38:67},{9:[1,69]},{9:$V6,19:70,21:20,22:21,24:22},{9:$V6,19:71,21:20,22:21,24:22},o($V8,[2,29]),{9:$Vk,14:[1,72],41:73,42:74,43:75,44:76,45:77,46:79,47:81,48:82,49:83,50:$Vl,53:$Vm,54:$Vn,55:$Vo,56:89,57:$Vp,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{33:[1,96]},o($Vv,[2,35],{26:$Va}),{12:$Vj,26:$Va,38:97},o($Vw,[2,37]),{14:[1,98],34:[1,99]},{9:$Vk,14:[1,100],15:$Vx,17:$Vy,28:$Vz,42:102,43:103,46:101,47:81,48:82,49:83,50:$Vl,53:$Vm,54:$Vn,55:$Vo,56:89,57:$Vp,58:$Vq,63:$VA,64:86,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,14:[1,118],42:120,43:121,46:119,47:81,48:82,49:83,50:$Vl,53:$Vm,54:$Vn,55:$Vo,56:89,57:$Vp,58:$Vq,64:86,75:$Vs,76:$Vt,77:$Vu},{14:[1,122],34:[1,123]},{9:$Vk,14:[1,124],42:126,43:127,46:125,47:81,48:82,49:83,50:$Vl,53:$Vm,54:$Vn,55:$Vo,56:89,57:$Vp,58:$Vq,64:86,75:$Vs,76:$Vt,77:$Vu},o($VL,[2,79],{15:[1,132],17:[1,134],28:[1,138],63:[1,137],65:[1,128],66:[1,129],67:[1,130],68:[1,131],69:[1,133],70:[1,135],71:[1,136],72:[1,139],73:[1,140],74:[1,141]}),o($VL,[2,80],{15:$VM,17:$VN,28:$VO,63:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,69:$VU,70:$VV,71:$VW,72:$VX,73:$VY,74:$VZ}),{9:$Vk,41:158,42:157,46:79,52:156,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},o($V_,[2,60]),o($V_,[2,61]),o($V_,[2,62]),{9:$Vk,42:162,56:160,58:$Vq,64:161},{9:$Vk,41:158,42:157,46:79,52:163,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},o($V$,[2,127],{26:$V01,29:$V11}),o($V$,[2,128]),o($V$,[2,129]),o([14,17,28,34,63,65,66,67,68,69,70,71,72,73,74],$V21,{25:167,15:$Ve,26:$V31,29:$V41,35:$Vd,51:[1,166]}),{9:[1,170]},{9:[1,171]},{9:[1,172]},{9:[1,173]},{9:$Vk,34:[1,175],41:158,42:157,46:79,52:174,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},o($V51,[2,132]),{9:$V6,19:176,21:20,22:21,24:22},o($V8,[2,28]),o($Vw,[2,38]),{9:$Vk,14:[1,177],41:178,42:179,43:180,46:79,47:81,48:82,49:83,50:$Vl,53:$Vm,54:$Vn,55:$Vo,56:89,57:$Vp,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},o($Vw,[2,40]),o($V61,[2,46],{15:$VM,17:$VN,28:$VO,63:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,69:$VU,70:$VV,71:$VW,72:$VX,73:$VY,74:$VZ}),o($V_,[2,51],{15:$Vx,17:$Vy,28:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($V_,[2,54]),{9:$Vk,41:158,42:157,46:79,52:181,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:182,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:183,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:184,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:185,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:186,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:187,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:188,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:189,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:190,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:191,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:192,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:193,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:194,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},o($Vw,[2,41]),o($V61,[2,47],{15:$VM,17:$VN,28:$VO,63:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,69:$VU,70:$VV,71:$VW,72:$VX,73:$VY,74:$VZ}),o($V_,[2,52],{15:$Vx,17:$Vy,28:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($V_,[2,55]),o($Vw,[2,42]),{9:$Vk,14:[1,195],41:196,42:197,43:198,46:79,47:81,48:82,49:83,50:$Vl,53:$Vm,54:$Vn,55:$Vo,56:89,57:$Vp,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},o($Vw,[2,44]),o($V61,[2,49],{15:$VM,17:$VN,28:$VO,63:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,69:$VU,70:$VV,71:$VW,72:$VX,73:$VY,74:$VZ}),o($V_,[2,57],{15:$Vx,17:$Vy,28:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($V_,[2,59]),{9:$Vk,41:158,42:157,46:79,52:199,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:200,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:201,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:202,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:203,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:204,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:205,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:206,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:207,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:208,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:209,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:210,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:211,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:212,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:213,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:214,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:215,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:216,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:217,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:218,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:219,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:220,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:221,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:222,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:223,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:224,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:225,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:226,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{12:$Vj,38:227},o($VL,[2,137],{15:$Vx,17:$Vy,28:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($V$,[2,138]),o([12,14,17,20,27,28,34,37,63,65,66,67,68,69,70,71,72,73,74],$V21,{25:167,15:$Ve,26:$V31,29:$V41,35:$Vd}),o($V$,[2,81],{25:167,26:$V31,29:$V41,35:$Vd}),o($V$,[2,82],{26:$V01,29:$V11}),o($V$,[2,83]),o($V$,[2,126]),{9:[1,228]},{9:$Vk,41:158,42:157,46:79,52:229,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$Vk,41:158,42:157,46:79,52:230,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{35:[1,231]},{9:[1,232]},{9:$Vk,41:158,42:157,46:79,52:233,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{33:[1,235],51:[1,234]},{33:[1,237],51:[1,236]},{33:[1,239],51:[1,238]},{33:[1,241],51:[1,240]},{34:[1,242]},o($V_,[2,73]),o($Vv,[2,36],{26:$Va}),o($Vw,[2,39]),o($V61,[2,45]),o($V_,[2,50],{15:$Vx,17:$Vy,28:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($V_,[2,53]),o($V$,[2,112]),o($V$,[2,113]),o($V$,[2,114]),o($V$,[2,115]),o($V$,[2,116]),o($V$,[2,117]),o($V$,[2,118]),o($V$,[2,119]),o($V$,[2,120]),o($V$,[2,121]),o($V$,[2,122]),o($V$,[2,123]),o($V$,[2,124]),o($V$,[2,125]),o($Vw,[2,43]),o($V61,[2,48]),o($V_,[2,56],{15:$Vx,17:$Vy,28:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($V_,[2,58]),o($V$,[2,84]),o($V$,[2,85]),o($V$,[2,86]),o($V$,[2,87]),o($V$,[2,88]),o($V$,[2,89]),o($V$,[2,90]),o($V$,[2,91]),o($V$,[2,92]),o($V$,[2,93]),o($V$,[2,94]),o($V$,[2,95]),o($V$,[2,96]),o($V$,[2,97]),o($V$,[2,98]),o($V$,[2,99]),o($V$,[2,100]),o($V$,[2,101]),o($V$,[2,102]),o($V$,[2,103]),o($V$,[2,104]),o($V$,[2,105]),o($V$,[2,106]),o($V$,[2,107]),o($V$,[2,108]),o($V$,[2,109]),o($V$,[2,110]),o($V$,[2,111]),o($V71,[2,77],{59:243,60:244}),o($V51,[2,134]),{27:[1,245]},{34:[1,246]},{9:$Vk,37:[2,139],41:158,42:157,46:79,52:249,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu,78:247,79:248},o($V51,[2,133]),{27:[1,250]},{9:$Vk,41:158,42:157,46:79,52:251,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$V6,19:252,21:20,22:21,24:22},{9:$Vk,41:158,42:157,46:79,52:253,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$V6,19:254,21:20,22:21,24:22},{9:$Vk,41:158,42:157,46:79,52:255,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$V6,19:256,21:20,22:21,24:22},{9:$Vk,41:158,42:157,46:79,52:257,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},{9:$V6,19:258,21:20,22:21,24:22},o($V_,[2,72]),o($V81,[2,74]),o($V81,[2,75],{61:[1,259]}),o($V51,[2,136]),o($V_,[2,71]),{37:[1,260]},{20:[1,261],37:[2,140]},o($Vv,[2,141]),o($V51,[2,135]),{34:[1,262]},{26:$Va,51:[1,263]},{34:[1,264]},{26:$Va,51:[1,265]},{34:[1,266]},{26:$Va,51:[1,267]},{34:[1,268]},{26:$Va,51:[1,269]},{12:$Vj,38:270,58:[1,271]},o([12,14,15,17,20,26,27,28,29,34,37,63,65,66,67,68,69,70,71,72,73,74],[2,131]),{9:$Vk,41:158,42:157,46:79,52:272,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},o($V_,[2,63]),{9:$Vk,41:158,42:157,46:79,52:273,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},o($V_,[2,64]),{9:$Vk,41:158,42:157,46:79,52:274,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},o($V_,[2,65]),{9:$Vk,41:158,42:157,46:79,52:275,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},o($V_,[2,66]),{9:$Vk,41:158,42:157,46:79,52:276,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},o($V81,[2,76]),{9:$Vk,41:158,42:157,46:79,52:277,56:159,58:$Vq,62:78,63:$Vr,64:86,75:$Vs,76:$Vt,77:$Vu},o($Vv,[2,142]),{34:[1,278]},{34:[1,279]},{34:[1,280]},{34:[1,281]},{12:$Vj,38:282},o($V_,[2,67]),o($V_,[2,68]),o($V_,[2,69]),o($V_,[2,70]),o($V71,[2,78])],
defaultActions: {6:[2,1],40:[2,31],41:[2,32]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return "pub"
break;
case 2:return "prot"
break;
case 3:return "class"
break;
case 4:return "extends"
break;
case 5:return "if"
break;
case 6:return "else"
break;
case 7:return "return_"
break;
case 8:return "let!"
break;
case 9:return "let"
break;
case 10:return "re!"
break;
case 11:return "re"
break;
case 12:return "NUMBER"
break;
case 13:return "STRING"
break;
case 14:return "IDENTIFIER"
break;
case 15:return "**"
break;
case 16:return "*"
break;
case 17:return "/"
break;
case 18:return "%"
break;
case 19:return "-"
break;
case 20:return "+"
break;
case 21:return "=="
break;
case 22:return "!="
break;
case 23:return "<"
break;
case 24:return "<="
break;
case 25:return ">"
break;
case 26:return ">="
break;
case 27:return "!"
break;
case 28:return "&&"
break;
case 29:return "||"
break;
case 30:return "?"
break;
case 31:return "."
break;
case 32:return "["
break;
case 33:return "]"
break;
case 34:return "="
break;
case 35:return "("
break;
case 36:return ")"
break;
case 37:return "{"
break;
case 38:return "}"
break;
case 39:return ":"
break;
case 40:return ","
break;
case 41:return ";"
break;
case 42:return "EOF"
break;
case 43:return "INVALID"
break;
}
},
rules: [/^(?:\s+)/,/^(?:pub\b)/,/^(?:prot\b)/,/^(?:class\b)/,/^(?:extends\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:let!)/,/^(?:let\b)/,/^(?:re!)/,/^(?:re\b)/,/^(?:-?\d+(\.\d+)?(e?[1-9]\d*)?\b)/,/^(?:"(\\(u[0-9a-fA-F]{4}|[\\"nt])|[^\\"])*")/,/^(?:[_a-zA-Z]\w*)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>=)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\?)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}