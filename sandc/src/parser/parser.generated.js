/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[13,14,19],$V1=[1,6],$V2=[2,6],$V3=[1,10],$V4=[12,15,23,26,28,31,34,36,45,68,99],$V5=[1,12],$V6=[9,20],$V7=[14,16,19,25,47],$V8=[23,29],$V9=[2,13],$Va=[1,28],$Vb=[2,21],$Vc=[1,32],$Vd=[28,31],$Ve=[14,16,18,19,25,47],$Vf=[2,9],$Vg=[1,46],$Vh=[12,23,28,31,36,45,68],$Vi=[12,23,28,31,34,36,45,68],$Vj=[1,53],$Vk=[16,19,25,47],$Vl=[2,34],$Vm=[1,64],$Vn=[2,39],$Vo=[1,70],$Vp=[1,71],$Vq=[1,92],$Vr=[1,110],$Vs=[1,112],$Vt=[1,119],$Vu=[1,120],$Vv=[1,121],$Vw=[1,122],$Vx=[1,123],$Vy=[1,124],$Vz=[1,125],$VA=[1,126],$VB=[1,99],$VC=[1,100],$VD=[1,101],$VE=[1,104],$VF=[1,105],$VG=[1,106],$VH=[1,111],$VI=[31,45],$VJ=[12,16,19,25,31,43,45,47,52,59,63,64,65,66,67,69,70,71,79,80,81,84,85,86,104],$VK=[1,137],$VL=[1,139],$VM=[1,130],$VN=[1,132],$VO=[1,147],$VP=[1,148],$VQ=[1,149],$VR=[1,150],$VS=[1,151],$VT=[1,152],$VU=[1,153],$VV=[1,136],$VW=[1,131],$VX=[1,133],$VY=[1,134],$VZ=[1,135],$V_=[1,138],$V$=[1,140],$V01=[1,141],$V11=[1,142],$V21=[1,143],$V31=[1,144],$V41=[12,23,25,26,28,31,36,37,38,45,68,73,74,75,76,77,78,84,87,88,89,90,91,92,93,94,95,96],$V51=[16,25,43,52,59,64,65,66,67,69,70,71,79,80,81,84,85,86,104],$V61=[12,23,25,26,28,31,36,37,38,43,45,68,73,74,75,76,77,78,84,87,88,89,90,91,92,93,94,95,96,99,102],$V71=[16,43,59,79,80,81,84,85,86,104],$V81=[12,23,25,26,28,31,37,38,45,68,73,74,75,76,77,78,84,87,88,89,90,91,92,93,94,95,96],$V91=[12,23,25,26,28,31,37,38,45,68,73,74,75,76,77,78,84,88,89,90,91,92,93,94,95,96],$Va1=[12,23,25,26,28,31,37,45,68,73,74,75,76,77,78,84,90,91,92,93,94,95,96],$Vb1=[12,23,25,26,28,31,37,45,68,73,74,75,76,77,78,91,92,93,94,95,96],$Vc1=[12,23,25,31,37,45,68,73,74,75,76,77,78,93,94,95,96],$Vd1=[12,16,25,31,43,45,52,59,64,65,66,67,69,70,71,79,80,81,84,85,86,104],$Ve1=[25,31];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"file":3,"optPackage":4,"optImports":5,"optUseStatements":6,"pubClass":7,"optPrivClasses":8,"EOF":9,"package":10,"oneOrMoreDotSeparatedIdentifiers":11,";":12,"import":13,"use":14,"as":15,"IDENTIFIER":16,"optCopyStatements":17,"copy":18,"pub":19,"class":20,"optTypeArgDefs":21,"optExtension":22,"{":23,"optClassItems":24,"}":25,"<":26,"typeArgDefs":27,">":28,"extends":29,"type":30,",":31,"nullableType":32,"nonNullableType":33,"?":34,"typeArgs":35,"[":36,"]":37,"*":38,"optTypeArgs":39,"classItem":40,"optAccessModifier":41,":":42,"(":43,"optArgDefs":44,")":45,"compoundNode":46,"prot":47,"argDefs":48,"simpleExpression":49,"nodeSequence":50,"rightDelimitedStatement":51,"expression":52,"ifNode":53,"returnStatement":54,"breakStatement":55,"continueStatement":56,"localVarDeclaration":57,"assignment":58,"if":59,"optIfAlternatives":60,"ifAlternatives":61,"elseIfs":62,"else":63,"return_":64,"break":65,"continue":66,"let":67,"=":68,"let!":69,"re":70,"re!":71,"assignmentOperation":72,"**=":73,"*=":74,"/=":75,"%=":76,"+=":77,"-=":78,"NUMBER":79,"STRING":80,"CHARACTER":81,"callableExpression":82,"functionCall":83,"-":84,"!":85,"~":86,"**":87,"/":88,"%":89,"+":90,"<=":91,">=":92,"==":93,"!=":94,"&&":95,"||":96,"typedObjectLiteral":97,"parenthesizedExpression":98,".":99,"optFunctionCallTypeArgs":100,"optArgs":101,"FUNCTION_CALL_TYPE_ARG_LEFT_ANGLE_BRACKET":102,"args":103,"OBJECT_LITERAL_TYPE":104,"objectEntries":105,"$accept":0,"$end":1},
terminals_: {2:"error",9:"EOF",10:"package",12:";",13:"import",14:"use",15:"as",16:"IDENTIFIER",18:"copy",19:"pub",20:"class",23:"{",25:"}",26:"<",28:">",29:"extends",31:",",34:"?",36:"[",37:"]",38:"*",42:":",43:"(",45:")",47:"prot",52:"expression",59:"if",63:"else",64:"return_",65:"break",66:"continue",67:"let",68:"=",69:"let!",70:"re",71:"re!",73:"**=",74:"*=",75:"/=",76:"%=",77:"+=",78:"-=",79:"NUMBER",80:"STRING",81:"CHARACTER",84:"-",85:"!",86:"~",87:"**",88:"/",89:"%",90:"+",91:"<=",92:">=",93:"==",94:"!=",95:"&&",96:"||",99:".",102:"FUNCTION_CALL_TYPE_ARG_LEFT_ANGLE_BRACKET",104:"OBJECT_LITERAL_TYPE"},
productions_: [0,[3,6],[4,0],[4,3],[5,0],[5,4],[6,0],[6,6],[6,4],[17,0],[17,6],[17,4],[7,10],[21,0],[21,3],[27,1],[27,3],[27,3],[27,5],[8,0],[8,10],[22,0],[22,2],[30,1],[30,1],[32,2],[33,4],[33,1],[33,3],[33,4],[39,0],[39,3],[35,1],[35,3],[24,0],[24,2],[40,5],[40,9],[40,7],[41,0],[41,1],[41,1],[44,0],[44,1],[48,3],[48,5],[46,2],[46,3],[46,3],[46,4],[50,2],[50,1],[50,3],[50,2],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[53,4],[60,0],[60,1],[61,3],[61,2],[62,4],[62,5],[54,3],[54,3],[54,2],[55,2],[56,2],[57,5],[57,5],[57,5],[57,5],[57,7],[57,7],[57,7],[57,7],[57,5],[57,5],[57,5],[57,5],[57,7],[57,7],[57,7],[57,7],[58,4],[58,4],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,4],[49,2],[49,2],[49,2],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,1],[49,1],[98,3],[98,3],[82,1],[82,3],[82,3],[83,5],[100,0],[100,3],[101,0],[101,1],[103,1],[103,1],[103,3],[103,3],[11,1],[11,3],[97,3],[97,4],[97,5],[105,3],[105,3],[105,5],[105,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return { type: yy.NodeType.File, packageName: $$[$0-5], imports: $$[$0-4], useStatements: $$[$0-3], pubClass: $$[$0-2], privClasses: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 2: case 21: case 39:
 this.$ = null; 
break;
case 3:
 this.$ = $$[$0-2].map(ident => ident.name).join("."); 
break;
case 4: case 6: case 9: case 13: case 19: case 30: case 34: case 42: case 46: case 61: case 128: case 130:
 this.$ = []; 
break;
case 5:
 this.$ = $$[$0-3].concat([{ type: yy.NodeType.Import, name: $$[$0-1].map(ident => ident.name).join("."), alias: null, location: yy.merge(_$[$0-2], _$[$0]) }]); 
break;
case 7:
 this.$ = $$[$0-5].concat([{ type: yy.NodeType.Use, name: $$[$0-3].map(ident => ident.name).join("."), alias: $$[$0-1], location: yy.merge(_$[$0-4], _$[$0]) }]); 
break;
case 8:
 this.$ = $$[$0-3].concat([{ type: yy.NodeType.Use, name: $$[$0-1].map(ident => ident.name).join("."), alias: null, location: yy.merge(_$[$0-2], _$[$0]) }]); 
break;
case 10:
 this.$ = $$[$0-5].concat([{ type: yy.NodeType.Copy, name: $$[$0-3].map(ident => ident.name).join("."), alias: $$[$0-1], location: yy.merge(_$[$0-4], _$[$0]) }]); 
break;
case 11:
 this.$ = $$[$0-3].concat([{ type: yy.NodeType.Copy, name: $$[$0-1].map(ident => ident.name).join("."), alias: null, location: yy.merge(_$[$0-2], _$[$0]) }]); 
break;
case 12:
 this.$ = { type: yy.NodeType.Class, isPub: true, name: $$[$0-7], typeArgDefs: $$[$0-6], superClass: $$[$0-5], copies: $$[$0-3], useStatements: $$[$0-2], items: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 14: case 31: case 48: case 122: case 123: case 129:
 this.$ = $$[$0-1]; 
break;
case 15:
 this.$ = [{ type: yy.NodeType.TypeArgDef, name: $$[$0], constraint: { constraintType: yy.ConstraintType.None }, location: yy.camelCase(this._$) }]; 
break;
case 16:
 this.$ = [{ type: yy.NodeType.TypeArgDef, name: $$[$0-2], constraint: { constraintType: yy.ConstraintType.Extends, superClass: $$[$0] }, location: yy.camelCase(this._$) }]; 
break;
case 17:
 this.$ = $$[$0-2].concat([{ type: yy.NodeType.TypeArgDef, name: $$[$0], constraint: { constraintType: yy.ConstraintType.None }, location: yy.camelCase(_$[$0]) }]); 
break;
case 18:
 this.$ = $$[$0-4].concat([{ type: yy.NodeType.TypeArgDef, name: $$[$0-2], constraint: { constraintType: yy.ConstraintType.Extends, superClass: $$[$0] }, location: yy.merge(_$[$0-2], _$[$0]) }]); 
break;
case 20:
 this.$ = $$[$0-9].concat([{ type: yy.NodeType.Class, isPub: false, name: $$[$0-7], typeArgDefs: $$[$0-6], superClass: $$[$0-5], copies: $$[$0-3], useStatements: $$[$0-2], items: $$[$0-1], location: yy.merge(_$[$0-8], _$[$0]) }]); 
break;
case 22:
 this.$ = $$[$0]; 
break;
case 25:
 this.$ = { type: yy.NodeType.Type, name: "nullable", args: [$$[$0-1]], location: yy.camelCase(this._$) }; 
break;
case 26:
 this.$ = { type: yy.NodeType.Type, name: $$[$0-3].map(ident => ident.name).join('.'), args: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 27:
 this.$ = { type: yy.NodeType.Type, name: $$[$0].map(ident => ident.name).join('.'), args: [], location: yy.camelCase(this._$) }; 
break;
case 28:
 this.$ = { type: yy.NodeType.Type, name: "array", args: [$$[$0-2]], location: yy.camelCase(this._$) }; 
break;
case 29:
 this.$ = { type: yy.NodeType.Type, name: "java.util.ArrayList", args: [yy.wrapPrimitiveIfNeeded($$[$0-3])], location: yy.camelCase(this._$) }; 
break;
case 32: case 51: case 132: case 133:
 this.$ = [$$[$0]]; 
break;
case 33: case 134: case 135:
 this.$ = $$[$0-2].concat([$$[$0]]); 
break;
case 35: case 53:
 this.$ = $$[$0-1].concat([$$[$0]]); 
break;
case 36:
 this.$ = { type: yy.NodeType.PropertyDeclaration, accessModifier: $$[$0-4], name: $$[$0-3], valueType: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 37:
 this.$ = { type: yy.NodeType.MethodDeclaration, accessModifier: $$[$0-8], name: $$[$0-7], typeArgs: $$[$0-6], args: $$[$0-4], returnType: $$[$0-1], body: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 38:
 this.$ = { type: yy.NodeType.MethodDeclaration, accessModifier: $$[$0-6], name: $$[$0-5], typeArgs: $$[$0-4], args: $$[$0-2], returnType: null, body: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 40:
 this.$ = "pub"; 
break;
case 41:
 this.$ = "prot"; 
break;
case 44:
 this.$ = [{ type: yy.NodeType.ArgDef, name: $$[$0-2], valueType: $$[$0], location: yy.camelCase(this._$) }]; 
break;
case 45:
 this.$ = $$[$0-4].concat([{ type: yy.NodeType.ArgDef, name: $$[$0-2], valueType: $$[$0], location: yy.merge(_$[$0-2], _$[$0]) }]); 
break;
case 47: case 50:
 this.$ = [$$[$0-1]]; 
break;
case 49: case 52:
 this.$ = $$[$0-2].concat([$$[$0-1]]); 
break;
case 60:
 this.$ = { type: yy.NodeType.If, condition: $$[$0-2], body: $$[$0-1], alternatives: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 63:
 this.$ = $$[$0-2].concat([{ type: yy.NodeType.IfAlternative, alternativeType: yy.IfAlternativeType.Else, body: $$[$0], location: yy.merge(_$[$0-1], _$[$0]) }]); 
break;
case 64:
 this.$ = [{ type: yy.NodeType.IfAlternative, alternativeType: yy.IfAlternativeType.Else, body: $$[$0], location: yy.camelCase(this._$) }]; 
break;
case 65:
 this.$ = [{ type: yy.NodeType.IfAlternative, alternativeType: yy.IfAlternativeType.ElseIf, condition: $$[$0-1], body: $$[$0], location: yy.camelCase(this._$) }]; 
break;
case 66:
 this.$ = $$[$0-4].concat([{ type: yy.NodeType.IfAlternative, alternativeType: yy.IfAlternativeType.ElseIf, condition: $$[$0-1], body: $$[$0], location: yy.merge(_$[$0-3], _$[$0]) }]); 
break;
case 67: case 68:
 this.$ = { type: yy.NodeType.Return, value: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 69:
 this.$ = { type: yy.NodeType.Return, value: null, location: yy.camelCase(this._$) }; 
break;
case 70:
 this.$ = { type: yy.NodeType.Break, value: null, location: yy.camelCase(this._$) }; 
break;
case 71:
 this.$ = { type: yy.NodeType.Continue, location: yy.camelCase(this._$) }; 
break;
case 72: case 80:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: false, doesShadow: false, name: $$[$0-3], initialValue: $$[$0-1], valueType: null, location: yy.camelCase(this._$) }; 
break;
case 73: case 81:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: false, doesShadow: true, name: $$[$0-3], initialValue: $$[$0-1], valueType: null, location: yy.camelCase(this._$) }; 
break;
case 74: case 82:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: true, doesShadow: false, name: $$[$0-3], initialValue: $$[$0-1], valueType: null, location: yy.camelCase(this._$) }; 
break;
case 75: case 83:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: true, doesShadow: true, name: $$[$0-3], initialValue: $$[$0-1], valueType: null, location: yy.camelCase(this._$) }; 
break;
case 76: case 84:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: false, doesShadow: false, name: $$[$0-5], initialValue: $$[$0-1], valueType: $$[$0-3], location: yy.camelCase(this._$) }; 
break;
case 77: case 85:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: false, doesShadow: true, name: $$[$0-5], initialValue: $$[$0-1], valueType: $$[$0-3], location: yy.camelCase(this._$) }; 
break;
case 78: case 86:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: true, doesShadow: false, name: $$[$0-5], initialValue: $$[$0-1], valueType: $$[$0-3], location: yy.camelCase(this._$) }; 
break;
case 79: case 87:
 this.$ = { type: yy.NodeType.LocalVariableDeclaration, isReassignable: true, doesShadow: true, name: $$[$0-5], initialValue: $$[$0-1], valueType: $$[$0-3], location: yy.camelCase(this._$) }; 
break;
case 88: case 89:
 this.$ = { type: yy.NodeType.Assignment, assignee: $$[$0-3], assignmentType: $$[$0-2], value: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 97:
 this.$ = { type: yy.NodeType.NumberLiteral, value: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 98:
 this.$ = { type: yy.NodeType.StringLiteral, value: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 99:
 this.$ = { type: yy.NodeType.CharacterLiteral, value: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 102:
 this.$ = { type: yy.NodeType.IndexExpr, left: $$[$0-3], right: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 103: case 104: case 105:
 this.$ = { type: yy.NodeType.PrefixExpr, operation: $$[$0-1], right: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119:
 this.$ = { type: yy.NodeType.InfixExpr, operation: $$[$0-1], left: $$[$0-2], right: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 124:
 this.$ = { type: yy.NodeType.Identifier, name: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 125: case 126:
 this.$ = { type: yy.NodeType.DotExpr, left: $$[$0-2], right: $$[$0], location: yy.camelCase(this._$) }; 
break;
case 127:
 this.$ = { type: yy.NodeType.FunctionCall, callee: $$[$0-4], typeArgs: $$[$0-3], args: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 136:
 this.$ = [{ type: yy.NodeType.Identifier, name: $$[$0], location: yy.camelCase(this._$) }]; 
break;
case 137:
 this.$ = $$[$0-2].concat([{ type: yy.NodeType.Identifier, name: $$[$0], location: yy.camelCase(_$[$0]) }]); 
break;
case 138:
 this.$ = { type: yy.NodeType.TypedObjectLiteral, valueType: yy.parseType($$[$0-2], _$[$0-2]), entries: [], location: yy.camelCase(this._$) }; 
break;
case 139:
 this.$ = { type: yy.NodeType.TypedObjectLiteral, valueType: yy.parseType($$[$0-3], _$[$0-3]), entries: $$[$0-1], location: yy.camelCase(this._$) }; 
break;
case 140:
 this.$ = { type: yy.NodeType.TypedObjectLiteral, valueType: yy.parseType($$[$0-4], _$[$0-4]), entries: $$[$0-2], location: yy.camelCase(this._$) }; 
break;
case 141: case 142:
 this.$ = [{ type: yy.NodeType.ObjectEntry, key: $$[$0-2], value: $$[$0], location: yy.camelCase(this._$) }]; 
break;
case 143: case 144:
 this.$ = $$[$0-4].concat([{ type: yy.NodeType.ObjectEntry, key: $$[$0-2], value: $$[$0], location: yy.merge(_$[$0-2], _$[$0]) }]); 
break;
}
},
table: [o($V0,[2,2],{3:1,4:2,10:[1,3]}),{1:[3]},o($V0,[2,4],{5:4}),{11:5,16:$V1},o([14,19],$V2,{6:7,13:[1,8]}),{12:[1,9],99:$V3},o($V4,[2,136]),{7:11,14:$V5,19:[1,13]},{11:14,16:$V1},o($V0,[2,3]),{16:[1,15]},o($V6,[2,19],{8:16}),{11:17,16:$V1},{20:[1,18]},{12:[1,19],99:$V3},o($V4,[2,137]),{9:[1,20],20:[1,21]},{12:[1,23],15:[1,22],99:$V3},{16:[1,24]},o($V0,[2,5]),{1:[2,1]},{16:[1,25]},{16:[1,26]},o($V7,[2,8]),o($V8,$V9,{21:27,26:$Va}),o($V8,$V9,{21:29,26:$Va}),{12:[1,30]},{22:31,23:$Vb,29:$Vc},{16:[1,34],27:33},{22:35,23:$Vb,29:$Vc},o($V7,[2,7]),{23:[1,36]},{11:40,16:$V1,30:37,32:38,33:39},{28:[1,41],31:[1,42]},o($Vd,[2,15],{29:[1,43]}),{23:[1,44]},o($Ve,$Vf,{17:45}),{23:[2,22],36:$Vg},o($Vh,[2,23]),o($Vh,[2,24],{34:[1,47]}),o($Vi,[2,27],{26:[1,48],99:$V3}),o([23,29,43],[2,14]),{16:[1,49]},{11:40,16:$V1,30:50,32:38,33:39},o($Ve,$Vf,{17:51}),o($V7,$V2,{6:52,18:$Vj}),{37:[1,54],38:[1,55]},o($Vh,[2,25]),{11:40,16:$V1,30:57,32:38,33:39,35:56},o($Vd,[2,17],{29:[1,58]}),o($Vd,[2,16],{36:$Vg}),o($V7,$V2,{6:59,18:$Vj}),o($Vk,$Vl,{24:60,14:$V5}),{11:61,16:$V1},o($Vi,[2,28]),{37:[1,62]},{28:[1,63],31:$Vm},o($Vd,[2,32],{36:$Vg}),{11:40,16:$V1,30:65,32:38,33:39},o($Vk,$Vl,{24:66,14:$V5}),{16:$Vn,19:$Vo,25:[1,67],40:68,41:69,47:$Vp},{12:[1,73],15:[1,72],99:$V3},o($Vi,[2,29]),o($Vi,[2,26]),{11:40,16:$V1,30:74,32:38,33:39},o($Vd,[2,18],{36:$Vg}),{16:$Vn,19:$Vo,25:[1,75],40:68,41:69,47:$Vp},o($V6,[2,12]),o($Vk,[2,35]),{16:[1,76]},{16:[2,40]},{16:[2,41]},{16:[1,77]},o($Ve,[2,11]),o($Vd,[2,33],{36:$Vg}),o($V6,[2,20]),{21:79,26:$Va,42:[1,78],43:$V9},{12:[1,80]},{11:40,16:$V1,30:81,32:38,33:39},{43:[1,82]},o($Ve,[2,10]),{12:[1,83],36:$Vg},{16:[1,86],44:84,45:[2,42],48:85},o($Vk,[2,36]),{45:[1,87]},{31:[1,88],45:[2,43]},{42:[1,89]},{23:$Vq,42:[1,90],46:91},{16:[1,93]},{11:40,16:$V1,30:94,32:38,33:39},{11:40,16:$V1,30:95,32:38,33:39},o($Vk,[2,38]),{16:$Vr,25:[1,96],43:$Vs,49:97,50:98,51:109,53:113,54:114,55:115,56:116,57:117,58:118,59:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,69:$Vy,70:$Vz,71:$VA,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{42:[1,127]},o($VI,[2,44],{36:$Vg}),{23:$Vq,36:$Vg,46:128},o($VJ,[2,46]),{12:[1,145],25:[1,129],26:$VK,28:$VL,36:$VM,38:$VN,68:$VO,72:146,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31},{16:$Vr,25:[1,154],43:$Vs,49:155,51:157,52:[1,156],53:113,54:114,55:115,56:116,57:117,58:118,59:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,69:$Vy,70:$Vz,71:$VA,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},o($V41,[2,97]),o($V41,[2,98]),o($V41,[2,99]),o($V41,[2,100],{100:159,43:[2,128],99:[1,158],102:[1,160]}),o($V41,[2,101],{99:[1,161]}),{16:$Vr,43:$Vs,49:162,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{16:$Vr,43:$Vs,49:163,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{16:$Vr,43:$Vs,49:164,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},o($V41,[2,120]),o($V41,[2,121]),o($V51,[2,51]),o($V61,[2,124]),{23:[1,165]},{16:$Vr,43:$Vs,49:166,53:167,59:$Vt,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},o($V51,[2,54]),o($V51,[2,55]),o($V51,[2,56]),o($V51,[2,57]),o($V51,[2,58]),o($V51,[2,59]),{16:$Vr,43:$Vs,49:168,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{12:[1,171],16:$Vr,43:$Vs,49:169,53:170,59:$Vt,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{12:[1,172]},{12:[1,173]},{16:[1,174]},{16:[1,175]},{16:[1,176]},{16:[1,177]},{11:40,16:$V1,30:178,32:38,33:39},o($Vk,[2,37]),o($VJ,[2,47]),{16:$Vr,43:$Vs,49:179,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{16:$Vr,43:$Vs,49:180,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{16:$Vr,43:$Vs,49:181,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{16:$Vr,43:$Vs,49:182,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{16:$Vr,43:$Vs,49:183,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{16:$Vr,43:$Vs,49:184,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{16:$Vr,43:$Vs,49:185,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{16:$Vr,43:$Vs,49:186,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{16:$Vr,43:$Vs,49:187,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{16:$Vr,43:$Vs,49:188,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{16:$Vr,43:$Vs,49:189,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{16:$Vr,43:$Vs,49:190,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{16:$Vr,43:$Vs,49:191,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{16:$Vr,43:$Vs,49:192,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{16:$Vr,43:$Vs,49:193,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},o($V51,[2,50]),{16:$Vr,43:$Vs,49:194,53:195,59:$Vt,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},o($V71,[2,90]),o($V71,[2,91]),o($V71,[2,92]),o($V71,[2,93]),o($V71,[2,94]),o($V71,[2,95]),o($V71,[2,96]),o($VJ,[2,48]),{25:[1,196],26:$VK,28:$VL,36:$VM,38:$VN,68:$VO,72:146,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31},{12:[1,197]},o($V51,[2,53]),{16:[1,198]},{43:[1,199]},{11:40,16:$V1,30:57,32:38,33:39,35:200},{16:[1,201]},o($V81,[2,103],{36:$VM}),o($V81,[2,104],{36:$VM}),o($V81,[2,105],{36:$VM}),{16:[1,204],25:[1,202],105:203},{26:$VK,28:$VL,36:$VM,38:$VN,45:[1,205],84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31},{45:[1,206]},{23:$Vq,26:$VK,28:$VL,36:$VM,38:$VN,46:207,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31},{12:[1,208],26:$VK,28:$VL,36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31},{12:[1,209]},o($V51,[2,69]),o($V51,[2,70]),o($V51,[2,71]),{42:[1,211],68:[1,210]},{42:[1,213],68:[1,212]},{42:[1,215],68:[1,214]},{42:[1,217],68:[1,216]},o($VI,[2,45],{36:$Vg}),{26:$VK,28:$VL,36:$VM,37:[1,218],38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31},o($V91,[2,106],{36:$VM,87:$VW}),o($V91,[2,107],{36:$VM,87:$VW}),o($V91,[2,108],{36:$VM,87:$VW}),o($V91,[2,109],{36:$VM,87:$VW}),o($Va1,[2,110],{36:$VM,38:$VN,87:$VW,88:$VX,89:$VY}),o($Va1,[2,111],{36:$VM,38:$VN,87:$VW,88:$VX,89:$VY}),o($Vb1,[2,112],{36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ}),o($Vb1,[2,113],{36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ}),o($Vb1,[2,114],{36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ}),o($Vb1,[2,115],{36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ}),o($Vc1,[2,116],{26:$VK,28:$VL,36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$}),o($Vc1,[2,117],{26:$VK,28:$VL,36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$}),o([12,23,25,31,37,45,68,73,74,75,76,77,78,95,96],[2,118],{26:$VK,28:$VL,36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11}),o([12,23,25,31,37,45,68,73,74,75,76,77,78,96],[2,119],{26:$VK,28:$VL,36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21}),{12:[1,219],26:$VK,28:$VL,36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31},{12:[1,220]},o($VJ,[2,49]),o($V51,[2,52]),o($V61,[2,125]),{16:$Vr,43:$Vs,45:[2,130],49:223,53:224,59:$Vt,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,101:221,103:222,104:$VH},{28:[1,225],31:$Vm},o($V61,[2,126]),o($V41,[2,138]),{25:[1,226],31:[1,227]},{42:[1,228]},o($V41,[2,122]),o($V41,[2,123]),o($Vd1,[2,61],{60:229,61:230,62:231,63:[1,232]}),o($V51,[2,67]),o($V51,[2,68]),{16:$Vr,43:$Vs,49:233,53:234,59:$Vt,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{11:40,16:$V1,30:235,32:38,33:39},{16:$Vr,43:$Vs,49:236,53:237,59:$Vt,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{11:40,16:$V1,30:238,32:38,33:39},{16:$Vr,43:$Vs,49:239,53:240,59:$Vt,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{11:40,16:$V1,30:241,32:38,33:39},{16:$Vr,43:$Vs,49:242,53:243,59:$Vt,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{11:40,16:$V1,30:244,32:38,33:39},o($V41,[2,102]),o($V51,[2,88]),o($V51,[2,89]),{45:[1,245]},{31:[1,246],45:[2,131]},o($VI,[2,132],{26:$VK,28:$VL,36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31}),o($VI,[2,133]),{43:[2,129]},o($V41,[2,139]),{16:[1,248],25:[1,247]},{16:$Vr,43:$Vs,49:249,53:250,59:$Vt,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},o($Vd1,[2,60]),o($Vd1,[2,62]),{63:[1,251]},{23:$Vq,46:252,59:[1,253]},{12:[1,254],26:$VK,28:$VL,36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31},{12:[1,255]},{36:$Vg,68:[1,256]},{12:[1,257],26:$VK,28:$VL,36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31},{12:[1,258]},{36:$Vg,68:[1,259]},{12:[1,260],26:$VK,28:$VL,36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31},{12:[1,261]},{36:$Vg,68:[1,262]},{12:[1,263],26:$VK,28:$VL,36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31},{12:[1,264]},{36:$Vg,68:[1,265]},o([12,23,25,26,28,31,36,37,38,45,68,73,74,75,76,77,78,84,87,88,89,90,91,92,93,94,95,96,99],[2,127]),{16:$Vr,43:$Vs,49:266,53:267,59:$Vt,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},o($V41,[2,140]),{42:[1,268]},o($Ve1,[2,141],{26:$VK,28:$VL,36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31}),o($Ve1,[2,142]),{23:$Vq,46:269,59:[1,270]},o($Vd1,[2,64]),{16:$Vr,43:$Vs,49:271,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},o($V51,[2,72]),o($V51,[2,80]),{16:$Vr,43:$Vs,49:272,53:273,59:$Vt,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},o($V51,[2,73]),o($V51,[2,81]),{16:$Vr,43:$Vs,49:274,53:275,59:$Vt,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},o($V51,[2,74]),o($V51,[2,82]),{16:$Vr,43:$Vs,49:276,53:277,59:$Vt,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},o($V51,[2,75]),o($V51,[2,83]),{16:$Vr,43:$Vs,49:278,53:279,59:$Vt,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},o($VI,[2,134],{26:$VK,28:$VL,36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31}),o($VI,[2,135]),{52:[1,280],53:281,59:$Vt},o($Vd1,[2,63]),{16:$Vr,43:$Vs,49:282,79:$VB,80:$VC,81:$VD,82:102,83:103,84:$VE,85:$VF,86:$VG,97:107,98:108,104:$VH},{23:$Vq,26:$VK,28:$VL,36:$VM,38:$VN,46:283,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31},{12:[1,284],26:$VK,28:$VL,36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31},{12:[1,285]},{12:[1,286],26:$VK,28:$VL,36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31},{12:[1,287]},{12:[1,288],26:$VK,28:$VL,36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31},{12:[1,289]},{12:[1,290],26:$VK,28:$VL,36:$VM,38:$VN,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31},{12:[1,291]},o($Ve1,[2,143]),o($Ve1,[2,144]),{23:$Vq,26:$VK,28:$VL,36:$VM,38:$VN,46:292,84:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31},{63:[2,65]},o($V51,[2,76]),o($V51,[2,84]),o($V51,[2,77]),o($V51,[2,85]),o($V51,[2,78]),o($V51,[2,86]),o($V51,[2,79]),o($V51,[2,87]),{63:[2,66]}],
defaultActions: {20:[2,1],70:[2,40],71:[2,41],225:[2,129],283:[2,65],292:[2,66]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return "pub"
break;
case 2:return "prot"
break;
case 3:return "priv"
break;
case 4:return "static"
break;
case 5:return "inline"
break;
case 6:return "open"
break;
case 7:return "abstract"
break;
case 8:return "final"
break;
case 9:return "class"
break;
case 10:return "extends"
break;
case 11:return "inst"
break;
case 12:return "new"
break;
case 13:return "instanceof"
break;
case 14:return "if"
break;
case 15:return "else"
break;
case 16:return "switch"
break;
case 17:return "case"
break;
case 18:return "match"
break;
case 19:return "while"
break;
case 20:return "loop"
break;
case 21:return "repeat"
break;
case 22:return "for"
break;
case 23:return "in"
break;
case 24:return "let!"
break;
case 25:return "let"
break;
case 26:return "re!"
break;
case 27:return "re"
break;
case 28:return "var"
break;
case 29:return "continue"
break;
case 30:return "break"
break;
case 31:return "return_"
break;
case 32:return "try"
break;
case 33:return "catch"
break;
case 34:return "finally"
break;
case 35:return "throw"
break;
case 36:return "use"
break;
case 37:return "import"
break;
case 38:return "copy"
break;
case 39:return "as"
break;
case 40:return "package"
break;
case 41:return "mod"
break;
case 42:return "NUMBER"
break;
case 43:return "STRING"
break;
case 44:return "CHARACTER"
break;
case 45:
    var upcoming = this.upcomingInput();
    var past = this.pastInput();
    var type = yy.lexUtils.getUpcomingObjectLiteralType(upcoming, past);
    if (type === null) {
        return "IDENTIFIER";
    } else {
        var i = type.length;
        while (i--) {
            this.input();
        }
        return "OBJECT_LITERAL_TYPE";
    }

break;
case 46:return "**"
break;
case 47:return "*"
break;
case 48:return "/"
break;
case 49:return "%"
break;
case 50:return "-"
break;
case 51:return "+"
break;
case 52:return "~"
break;
case 53:return "=="
break;
case 54:return "!="
break;
case 55:return "~="
break;
case 56:
    var upcoming = this.upcomingInput();
    if (yy.lexUtils.isThereUpcomingTypeArgListAndOpenParen(upcoming)) {
        return "FUNCTION_CALL_TYPE_ARG_LEFT_ANGLE_BRACKET";
    } else {
        return "<";
    }

break;
case 57:return "<="
break;
case 58:return ">"
break;
case 59:return ">="
break;
case 60:return "!"
break;
case 61:return "&&"
break;
case 62:return "||"
break;
case 63:return "?"
break;
case 64:return "."
break;
case 65:return "["
break;
case 66:return "]"
break;
case 67:return "="
break;
case 68:return "**="
break;
case 69:return "*="
break;
case 70:return "/="
break;
case 71:return "%="
break;
case 72:return "+="
break;
case 73:return "-="
break;
case 74:return "("
break;
case 75:return ")"
break;
case 76:return "{"
break;
case 77:return "}"
break;
case 78:return ":"
break;
case 79:return ","
break;
case 80:return ";"
break;
case 81:return "EOF"
break;
case 82:return "INVALID"
break;
}
},
rules: [/^(?:\s+)/,/^(?:pub\b)/,/^(?:prot\b)/,/^(?:priv\b)/,/^(?:static\b)/,/^(?:inline\b)/,/^(?:open\b)/,/^(?:abstract\b)/,/^(?:final\b)/,/^(?:class\b)/,/^(?:extends\b)/,/^(?:inst\b)/,/^(?:new\b)/,/^(?:instanceof\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:match\b)/,/^(?:while\b)/,/^(?:loop\b)/,/^(?:repeat\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:let!)/,/^(?:let\b)/,/^(?:re!)/,/^(?:re\b)/,/^(?:var\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:try\b)/,/^(?:catch\b)/,/^(?:finally\b)/,/^(?:throw\b)/,/^(?:use\b)/,/^(?:import\b)/,/^(?:copy\b)/,/^(?:as\b)/,/^(?:package\b)/,/^(?:mod\b)/,/^(?:-?\d+(\.\d+)?(e?[1-9]\d*)?(int|long|short|char|byte|float|double)?\b)/,/^(?:"(\\(u[0-9a-fA-F]{4}|[\\"nt])|[^\\"\n])*")/,/^(?:'([^\\'\n]|\\[\\'nt])')/,/^(?:[_a-zA-Z]\w*)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:~)/,/^(?:==)/,/^(?:!=)/,/^(?:~=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>=)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\?)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:\*\*=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}