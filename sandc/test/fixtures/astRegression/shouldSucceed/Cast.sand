pub class Cast {
    simple() {
        a as! Foo
    }

    typeArg() {
        a as! Foo<int, char[*]>
    }

    typeRlist() {
        a as! Foo[*]
    }

    typeNullable() {
        a as! Foo?
    }

    objLit() {
        Foo {} as! Foo<int, char[*]>
    }

    if_() {
        (if x {} else {}) as! Foo<int, char[*]>
    }

    declaration() {
        let x = x as! Foo<int, char[*]>;
    }

    assignment() {
        x = x as! Foo<int, char[*]>;
    }

    return_() {
        return x as! Foo<int, char[*]>;
    }

    arg() {
        foo(x as! Foo<int, char[*]>)
    }

    infix() {
        4 + x as! Foo<int, char[*]>
    }

    prefix() {
        ~x as! Foo[]
    }
}